// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length);
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1)
          + peg$padEnd("", last - s.column, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { file: peg$parsefile };
  var peg$startRuleFunction = peg$parsefile;

  var peg$c0 = "namespace";
  var peg$c1 = "function";
  var peg$c2 = "macro";
  var peg$c3 = "on";
  var peg$c4 = "then";
  var peg$c5 = "import";
  var peg$c6 = "define";
  var peg$c7 = "?";
  var peg$c8 = "tag";
  var peg$c9 = "var";
  var peg$c10 = "$";
  var peg$c11 = "score";
  var peg$c12 = ">=";
  var peg$c13 = "<=";
  var peg$c14 = "==";
  var peg$c15 = "!=";
  var peg$c16 = "<";
  var peg$c17 = ">";
  var peg$c18 = "::";
  var peg$c19 = "@@";
  var peg$c20 = "->";
  var peg$c21 = "bossbar";
  var peg$c22 = "/";
  var peg$c23 = "*";
  var peg$c24 = "<=>";
  var peg$c25 = "+=";
  var peg$c26 = "-=";
  var peg$c27 = "*=";
  var peg$c28 = "/=";
  var peg$c29 = "%=";
  var peg$c30 = "?=";
  var peg$c31 = "=";
  var peg$c32 = "++";
  var peg$c33 = "--";
  var peg$c34 = "{";
  var peg$c35 = "say";
  var peg$c36 = "print";
  var peg$c37 = "tell";
  var peg$c38 = "append";
  var peg$c39 = "prepend";
  var peg$c40 = "merge";
  var peg$c41 = "insert";
  var peg$c42 = "remove";
  var peg$c43 = "summon";
  var peg$c44 = "give";
  var peg$c45 = "clear";
  var peg$c46 = "setblock";
  var peg$c47 = "destroy";
  var peg$c48 = "keep";
  var peg$c49 = "replace";
  var peg$c50 = "add";
  var peg$c51 = "untag";
  var peg$c52 = "xyz";
  var peg$c53 = "xy";
  var peg$c54 = "xz";
  var peg$c55 = "yz";
  var peg$c56 = "x";
  var peg$c57 = "y";
  var peg$c58 = "z";
  var peg$c59 = "deg";
  var peg$c60 = "@[";
  var peg$c61 = "]";
  var peg$c62 = "@";
  var peg$c63 = "all";
  var peg$c64 = ".";
  var peg$c65 = "!";
  var peg$c66 = "[";
  var peg$c67 = "d";
  var peg$c68 = "type";
  var peg$c69 = "predicate";
  var peg$c70 = "limit";
  var peg$c71 = "scores";
  var peg$c72 = "advancements";
  var peg$c73 = "sort";
  var peg$c74 = "gamemode";
  var peg$c75 = "team";
  var peg$c76 = "name";
  var peg$c77 = "nbt";
  var peg$c78 = "level";
  var peg$c79 = "distance";
  var peg$c80 = "x_rotation";
  var peg$c81 = "y_rotation";
  var peg$c82 = "=!";
  var peg$c83 = "nearest";
  var peg$c84 = "closest";
  var peg$c85 = "furthest";
  var peg$c86 = "farthest";
  var peg$c87 = "random";
  var peg$c88 = "any";
  var peg$c89 = "arbitrary";
  var peg$c90 = "oldest";
  var peg$c91 = "{}";
  var peg$c92 = "[]";
  var peg$c93 = ":";
  var peg$c94 = "#";
  var peg$c95 = "..";
  var peg$c96 = "true";
  var peg$c97 = "false";
  var peg$c98 = "}";
  var peg$c99 = "...";
  var peg$c100 = "0";
  var peg$c101 = "\"";
  var peg$c102 = "\\";
  var peg$c103 = "{?";
  var peg$c104 = "{=";
  var peg$c105 = "{.";
  var peg$c106 = "{$";
  var peg$c107 = "{->";
  var peg$c108 = "(";
  var peg$c109 = "json";
  var peg$c110 = "snbt";
  var peg$c111 = "b";
  var peg$c112 = "f";
  var peg$c113 = "n";
  var peg$c114 = "r";
  var peg$c115 = "t";
  var peg$c116 = "u";
  var peg$c117 = "</";
  var peg$c118 = "/>";
  var peg$c119 = "&";
  var peg$c120 = ")";
  var peg$c121 = ",";
  var peg$c122 = "//";
  var peg$c123 = "adventure";
  var peg$c124 = "creative";
  var peg$c125 = "spectator";
  var peg$c126 = "survival";
  var peg$c127 = "align";
  var peg$c128 = "anchored";
  var peg$c129 = "as";
  var peg$c130 = "at";
  var peg$c131 = "facing";
  var peg$c132 = "for";
  var peg$c133 = "in";
  var peg$c134 = "pos";
  var peg$c135 = "positioned";
  var peg$c136 = "rot";
  var peg$c137 = "rotated";
  var peg$c138 = "eyes";
  var peg$c139 = "feet";
  var peg$c140 = "back";
  var peg$c141 = "down";
  var peg$c142 = "downward";
  var peg$c143 = "east";
  var peg$c144 = "forward";
  var peg$c145 = "left";
  var peg$c146 = "north";
  var peg$c147 = "right";
  var peg$c148 = "south";
  var peg$c149 = "up";
  var peg$c150 = "upward";
  var peg$c151 = "west";
  var peg$c152 = "after";
  var peg$c153 = "else";
  var peg$c154 = "every";
  var peg$c155 = "and";
  var peg$c156 = "if";
  var peg$c157 = "repeat";
  var peg$c158 = "test";
  var peg$c159 = "until";
  var peg$c160 = "unless";
  var peg$c161 = "while";
  var peg$c162 = "when";
  var peg$c163 = "except";
  var peg$c164 = "catch";
  var peg$c165 = "resolve";
  var peg$c166 = "reject";
  var peg$c167 = "self";
  var peg$c168 = "delete";
  var peg$c169 = "max";
  var peg$c170 = "players";
  var peg$c171 = "value";
  var peg$c172 = "visible";
  var peg$c173 = "style";
  var peg$c174 = "color";
  var peg$c175 = "ward";
  var peg$c176 = "~";
  var peg$c177 = "^";
  var peg$c178 = "itioned";
  var peg$c179 = "ated";

  var peg$r0 = /^[a-z]/;
  var peg$r1 = /^[a-z0-9_]/i;
  var peg$r2 = /^[xyz]/;
  var peg$r3 = /^[a-z]/i;
  var peg$r4 = /^[a-z0-9.:_\-]/i;
  var peg$r5 = /^[bsli]/i;
  var peg$r6 = /^[fd]/i;
  var peg$r7 = /^[eE]/;
  var peg$r8 = /^[\-+]/;
  var peg$r9 = /^[+\-]/;
  var peg$r10 = /^[0-9]/;
  var peg$r11 = /^[{}]/;
  var peg$r12 = /^[{}"]/;
  var peg$r13 = /^[{\n\r]/;
  var peg$r14 = /^[{]/;
  var peg$r15 = /^[^\0-\x1F\\]/;
  var peg$r16 = /^[0-9a-f]/i;
  var peg$r17 = /^[A-Z_]/i;
  var peg$r18 = /^[A-Z0-9_]/i;
  var peg$r19 = /^[ \t]/;
  var peg$r20 = /^[ \n\t\r]/;
  var peg$r21 = /^[\n\r]/;
  var peg$r22 = /^[^\n\r]/;
  var peg$r23 = /^[a-z_]/;
  var peg$r24 = /^[a-z0-9_]/;
  var peg$r25 = /^[a-z\-_]/i;
  var peg$r26 = /^[tds]/;
  var peg$r27 = /^[.df]/i;
  var peg$r28 = /^[islb]/i;
  var peg$r29 = /^[df]/i;

  var peg$e0 = peg$literalExpectation("namespace", false);
  var peg$e1 = peg$literalExpectation("function", false);
  var peg$e2 = peg$literalExpectation("macro", false);
  var peg$e3 = peg$literalExpectation("on", false);
  var peg$e4 = peg$literalExpectation("then", false);
  var peg$e5 = peg$literalExpectation("import", false);
  var peg$e6 = peg$literalExpectation("define", false);
  var peg$e7 = peg$otherExpectation("macro argument");
  var peg$e8 = peg$literalExpectation("?", false);
  var peg$e9 = peg$otherExpectation("declaration");
  var peg$e10 = peg$literalExpectation("tag", false);
  var peg$e11 = peg$literalExpectation("var", false);
  var peg$e12 = peg$literalExpectation("$", false);
  var peg$e13 = peg$literalExpectation("score", false);
  var peg$e14 = peg$literalExpectation(">=", false);
  var peg$e15 = peg$literalExpectation("<=", false);
  var peg$e16 = peg$literalExpectation("==", false);
  var peg$e17 = peg$literalExpectation("!=", false);
  var peg$e18 = peg$literalExpectation("<", false);
  var peg$e19 = peg$literalExpectation(">", false);
  var peg$e20 = peg$literalExpectation("::", false);
  var peg$e21 = peg$literalExpectation("@@", false);
  var peg$e22 = peg$literalExpectation("->", false);
  var peg$e23 = peg$literalExpectation("bossbar", false);
  var peg$e24 = peg$literalExpectation("/", false);
  var peg$e25 = peg$literalExpectation("*", false);
  var peg$e26 = peg$literalExpectation("<=>", false);
  var peg$e27 = peg$literalExpectation("+=", false);
  var peg$e28 = peg$literalExpectation("-=", false);
  var peg$e29 = peg$literalExpectation("*=", false);
  var peg$e30 = peg$literalExpectation("/=", false);
  var peg$e31 = peg$literalExpectation("%=", false);
  var peg$e32 = peg$literalExpectation("?=", false);
  var peg$e33 = peg$literalExpectation("=", false);
  var peg$e34 = peg$literalExpectation("++", false);
  var peg$e35 = peg$literalExpectation("--", false);
  var peg$e36 = peg$literalExpectation("{", false);
  var peg$e37 = peg$literalExpectation("say", false);
  var peg$e38 = peg$literalExpectation("print", false);
  var peg$e39 = peg$literalExpectation("tell", false);
  var peg$e40 = peg$literalExpectation("append", false);
  var peg$e41 = peg$literalExpectation("prepend", false);
  var peg$e42 = peg$literalExpectation("merge", false);
  var peg$e43 = peg$literalExpectation("insert", false);
  var peg$e44 = peg$literalExpectation("remove", false);
  var peg$e45 = peg$literalExpectation("summon", false);
  var peg$e46 = peg$literalExpectation("give", false);
  var peg$e47 = peg$literalExpectation("clear", false);
  var peg$e48 = peg$literalExpectation("setblock", false);
  var peg$e49 = peg$literalExpectation("destroy", false);
  var peg$e50 = peg$literalExpectation("keep", false);
  var peg$e51 = peg$literalExpectation("replace", false);
  var peg$e52 = peg$literalExpectation("add", false);
  var peg$e53 = peg$literalExpectation("untag", false);
  var peg$e54 = peg$literalExpectation("xyz", false);
  var peg$e55 = peg$literalExpectation("xy", false);
  var peg$e56 = peg$literalExpectation("xz", false);
  var peg$e57 = peg$literalExpectation("yz", false);
  var peg$e58 = peg$literalExpectation("x", false);
  var peg$e59 = peg$literalExpectation("y", false);
  var peg$e60 = peg$literalExpectation("z", false);
  var peg$e61 = peg$literalExpectation("deg", false);
  var peg$e62 = peg$otherExpectation("selector");
  var peg$e63 = peg$literalExpectation("@[", false);
  var peg$e64 = peg$literalExpectation("]", false);
  var peg$e65 = peg$literalExpectation("@", false);
  var peg$e66 = peg$literalExpectation("all", false);
  var peg$e67 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e68 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, true);
  var peg$e69 = peg$otherExpectation("selector tag");
  var peg$e70 = peg$literalExpectation(".", false);
  var peg$e71 = peg$literalExpectation("!", false);
  var peg$e72 = peg$otherExpectation("selector nbt");
  var peg$e73 = peg$otherExpectation("selector brackets");
  var peg$e74 = peg$literalExpectation("[", false);
  var peg$e75 = peg$literalExpectation("d", false);
  var peg$e76 = peg$classExpectation(["x", "y", "z"], false, false);
  var peg$e77 = peg$literalExpectation("type", false);
  var peg$e78 = peg$literalExpectation("predicate", false);
  var peg$e79 = peg$literalExpectation("limit", false);
  var peg$e80 = peg$literalExpectation("scores", false);
  var peg$e81 = peg$literalExpectation("advancements", false);
  var peg$e82 = peg$literalExpectation("sort", false);
  var peg$e83 = peg$literalExpectation("gamemode", false);
  var peg$e84 = peg$literalExpectation("team", false);
  var peg$e85 = peg$literalExpectation("name", false);
  var peg$e86 = peg$literalExpectation("nbt", false);
  var peg$e87 = peg$literalExpectation("level", false);
  var peg$e88 = peg$literalExpectation("distance", false);
  var peg$e89 = peg$literalExpectation("x_rotation", false);
  var peg$e90 = peg$literalExpectation("y_rotation", false);
  var peg$e91 = peg$literalExpectation("=!", false);
  var peg$e92 = peg$literalExpectation("nearest", false);
  var peg$e93 = peg$literalExpectation("closest", false);
  var peg$e94 = peg$literalExpectation("furthest", false);
  var peg$e95 = peg$literalExpectation("farthest", false);
  var peg$e96 = peg$literalExpectation("random", false);
  var peg$e97 = peg$literalExpectation("any", false);
  var peg$e98 = peg$literalExpectation("arbitrary", false);
  var peg$e99 = peg$literalExpectation("oldest", false);
  var peg$e100 = peg$otherExpectation("variable");
  var peg$e101 = peg$otherExpectation("score objective");
  var peg$e102 = peg$otherExpectation("criterion");
  var peg$e103 = peg$classExpectation([["a", "z"]], false, true);
  var peg$e104 = peg$classExpectation([["a", "z"], ["0", "9"], ".", ":", "_", "-"], false, true);
  var peg$e105 = peg$literalExpectation("{}", false);
  var peg$e106 = peg$literalExpectation("[]", false);
  var peg$e107 = peg$otherExpectation("block predicate");
  var peg$e108 = peg$otherExpectation("item predicate");
  var peg$e109 = peg$literalExpectation(":", false);
  var peg$e110 = peg$literalExpectation("#", false);
  var peg$e111 = peg$literalExpectation("..", false);
  var peg$e112 = peg$otherExpectation("typed value");
  var peg$e113 = peg$literalExpectation("true", false);
  var peg$e114 = peg$literalExpectation("false", false);
  var peg$e115 = peg$literalExpectation("}", false);
  var peg$e116 = peg$literalExpectation("...", false);
  var peg$e117 = peg$otherExpectation("integer");
  var peg$e118 = peg$classExpectation(["b", "s", "l", "i"], false, true);
  var peg$e119 = peg$classExpectation(["f", "d"], false, true);
  var peg$e120 = peg$classExpectation(["e", "E"], false, false);
  var peg$e121 = peg$classExpectation(["-", "+"], false, false);
  var peg$e122 = peg$classExpectation(["+", "-"], false, false);
  var peg$e123 = peg$literalExpectation("0", false);
  var peg$e124 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e125 = peg$literalExpectation("\"", false);
  var peg$e126 = peg$classExpectation(["{", "}"], false, false);
  var peg$e127 = peg$classExpectation(["{", "}", "\""], false, false);
  var peg$e128 = peg$literalExpectation("\\", false);
  var peg$e129 = peg$anyExpectation();
  var peg$e130 = peg$literalExpectation("{?", false);
  var peg$e131 = peg$literalExpectation("{=", false);
  var peg$e132 = peg$literalExpectation("{.", false);
  var peg$e133 = peg$literalExpectation("{$", false);
  var peg$e134 = peg$literalExpectation("{->", false);
  var peg$e135 = peg$literalExpectation("(", false);
  var peg$e136 = peg$literalExpectation("json", false);
  var peg$e137 = peg$literalExpectation("snbt", false);
  var peg$e138 = peg$classExpectation(["{", "\n", "\r"], false, false);
  var peg$e139 = peg$classExpectation(["{"], false, false);
  var peg$e140 = peg$literalExpectation("b", false);
  var peg$e141 = peg$literalExpectation("f", false);
  var peg$e142 = peg$literalExpectation("n", false);
  var peg$e143 = peg$literalExpectation("r", false);
  var peg$e144 = peg$literalExpectation("t", false);
  var peg$e145 = peg$literalExpectation("u", false);
  var peg$e146 = peg$classExpectation([["\0", "\x1F"], "\\"], true, false);
  var peg$e147 = peg$literalExpectation("</", false);
  var peg$e148 = peg$literalExpectation("/>", false);
  var peg$e149 = peg$literalExpectation("&", false);
  var peg$e150 = peg$literalExpectation(")", false);
  var peg$e151 = peg$literalExpectation(",", false);
  var peg$e152 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  var peg$e153 = peg$classExpectation([["A", "Z"], "_"], false, true);
  var peg$e154 = peg$classExpectation([["A", "Z"], ["0", "9"], "_"], false, true);
  var peg$e155 = peg$otherExpectation("whitespace");
  var peg$e156 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e157 = peg$classExpectation([" ", "\n", "\t", "\r"], false, false);
  var peg$e158 = peg$otherExpectation("end of line");
  var peg$e159 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e160 = peg$literalExpectation("//", false);
  var peg$e161 = peg$classExpectation(["\n", "\r"], true, false);
  var peg$e162 = peg$classExpectation([["a", "z"], "_"], false, false);
  var peg$e163 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e164 = peg$classExpectation([["a", "z"], "-", "_"], false, true);
  var peg$e165 = peg$literalExpectation("adventure", false);
  var peg$e166 = peg$literalExpectation("creative", false);
  var peg$e167 = peg$literalExpectation("spectator", false);
  var peg$e168 = peg$literalExpectation("survival", false);
  var peg$e169 = peg$literalExpectation("align", false);
  var peg$e170 = peg$literalExpectation("anchored", false);
  var peg$e171 = peg$literalExpectation("as", false);
  var peg$e172 = peg$literalExpectation("at", false);
  var peg$e173 = peg$literalExpectation("facing", false);
  var peg$e174 = peg$literalExpectation("for", false);
  var peg$e175 = peg$literalExpectation("in", false);
  var peg$e176 = peg$literalExpectation("pos", false);
  var peg$e177 = peg$literalExpectation("positioned", false);
  var peg$e178 = peg$literalExpectation("rot", false);
  var peg$e179 = peg$literalExpectation("rotated", false);
  var peg$e180 = peg$literalExpectation("eyes", false);
  var peg$e181 = peg$literalExpectation("feet", false);
  var peg$e182 = peg$literalExpectation("back", false);
  var peg$e183 = peg$literalExpectation("down", false);
  var peg$e184 = peg$literalExpectation("downward", false);
  var peg$e185 = peg$literalExpectation("east", false);
  var peg$e186 = peg$literalExpectation("forward", false);
  var peg$e187 = peg$literalExpectation("left", false);
  var peg$e188 = peg$literalExpectation("north", false);
  var peg$e189 = peg$literalExpectation("right", false);
  var peg$e190 = peg$literalExpectation("south", false);
  var peg$e191 = peg$literalExpectation("up", false);
  var peg$e192 = peg$literalExpectation("upward", false);
  var peg$e193 = peg$literalExpectation("west", false);
  var peg$e194 = peg$literalExpectation("after", false);
  var peg$e195 = peg$literalExpectation("else", false);
  var peg$e196 = peg$literalExpectation("every", false);
  var peg$e197 = peg$literalExpectation("and", false);
  var peg$e198 = peg$literalExpectation("if", false);
  var peg$e199 = peg$literalExpectation("repeat", false);
  var peg$e200 = peg$literalExpectation("test", false);
  var peg$e201 = peg$literalExpectation("until", false);
  var peg$e202 = peg$literalExpectation("unless", false);
  var peg$e203 = peg$literalExpectation("while", false);
  var peg$e204 = peg$literalExpectation("when", false);
  var peg$e205 = peg$literalExpectation("except", false);
  var peg$e206 = peg$literalExpectation("catch", false);
  var peg$e207 = peg$literalExpectation("resolve", false);
  var peg$e208 = peg$literalExpectation("reject", false);
  var peg$e209 = peg$literalExpectation("self", false);
  var peg$e210 = peg$literalExpectation("delete", false);
  var peg$e211 = peg$literalExpectation("max", false);
  var peg$e212 = peg$literalExpectation("players", false);
  var peg$e213 = peg$literalExpectation("value", false);
  var peg$e214 = peg$literalExpectation("visible", false);
  var peg$e215 = peg$literalExpectation("style", false);
  var peg$e216 = peg$literalExpectation("color", false);
  var peg$e217 = peg$literalExpectation("ward", false);
  var peg$e218 = peg$literalExpectation("~", false);
  var peg$e219 = peg$literalExpectation("^", false);
  var peg$e220 = peg$literalExpectation("itioned", false);
  var peg$e221 = peg$literalExpectation("ated", false);
  var peg$e222 = peg$classExpectation(["t", "d", "s"], false, false);
  var peg$e223 = peg$classExpectation([".", "d", "f"], false, true);
  var peg$e224 = peg$classExpectation(["i", "s", "l", "b"], false, true);
  var peg$e225 = peg$classExpectation(["d", "f"], false, true);

  var peg$f0 = function(head, tail) {
    return N('file',{namespaces:[head,...tail]})
  };
  var peg$f1 = function(ns, statements) {
          return V('DeclareNamespace',{},{ns,statements})
        };
  var peg$f2 = function(resloc, tags, statements) {
            return I('DeclareFunction', { resloc, tags}, { statements } )
        };
  var peg$f3 = function(name, args, statements) {
          return V('DeclareMacro', {},{ name, args, statements  } )
        };
  var peg$f4 = function(head, tail) {
          return V('Statements',{statements:[head,...tail]})
        };
  var peg$f5 = function(head, tail) {
          return [head,...tail]
        };
  var peg$f6 = function(trigger, conditions, then) {
          return V('DeclareEvent',{trigger,conditions,then})
        };
  var peg$f7 = function(file) {
        return I('Import',{file})
      };
  var peg$f8 = function(resloc, value) {
      return I('DefineJson',{resloc,value})
    };
  var peg$f9 = function(head, tail) {
        return [head,...tail]
      };
  var peg$f10 = function() {
        return []
      };
  var peg$f11 = function(name, def) {
        return {name,def}
      };
  var peg$f12 = function(resloc, args) {
        return V('MacroCall', { resloc}, { args } )
      };
  var peg$f13 = function(numbered, named) {
        return {numbered,named:named||{}}
      };
  var peg$f14 = function(named) {
        return {numbered:[],named:named||{}}
      };
  var peg$f15 = function(value) {
        return value
      };
  var peg$f16 = function(name, value) {
        return {name,value}
      };
  var peg$f17 = function(name) {
          return I('DeclareTag',{name})
        };
  var peg$f18 = function(name, value) {
            return I('DeclareVar',{value},{name})
          };
  var peg$f19 = function(name, criterion) {
          return I('DeclareScore',{},{name,criterion})
        };
  var peg$f20 = function() { return 'OpGTE' };
  var peg$f21 = function() { return 'OpLTE' };
  var peg$f22 = function() { return 'OpEQ' };
  var peg$f23 = function() { return 'OpNEQ' };
  var peg$f24 = function() { return 'OpLT' };
  var peg$f25 = function() { return 'OpGT' };
  var peg$f26 = function(left, op, right) {
        return V(op,{left,right})
      };
  var peg$f27 = function(left, right) {
            return V('DataPathGeneric', { left, right } )
          };
  var peg$f28 = function(left, path) {
            return V('DataPathGeneric', { name, path } )
          };
  var peg$f29 = function(position, path) {
            return V('DataPathBlock', { position,path } )
          };
  var peg$f30 = function(path) { return N('ValueDataPathVar', { path } ) };
  var peg$f31 = function(name) {
        return V('Variable',{},{name})
      };
  var peg$f32 = function(name) {
        return V('Constant',{},{name})
      };
  var peg$f33 = function(left, right) {
        return V( 'Score', { left,right } )
      };
  var peg$f34 = function(spec) {
        return V( 'Selector', { spec } )
      };
  var peg$f35 = function(resloc, prop) {
        return V( 'BossBarProp', { resloc},{ prop } )
      };
  var peg$f36 = function(command) {
        return V('NativeCommand', { command  } )
      };
  var peg$f37 = function(left, scale, right) {
          return I('AssignScaled',{left,right,scale})  
        };
  var peg$f38 = function(left, op, right) {
          return I(op ,{left,right})  
        };
  var peg$f39 = function(left, op) {
          return I(op ,{left})  
        };
  var peg$f40 = function(scale) {
        return N('AssignmentScale',{scale})
      };
  var peg$f41 = function() { return 'AssignSwap' };
  var peg$f42 = function() { return 'AssignAdd' };
  var peg$f43 = function() { return 'AssignSub' };
  var peg$f44 = function() { return 'AssignMul' };
  var peg$f45 = function() { return 'AssignDiv' };
  var peg$f46 = function() { return 'AssignMod' };
  var peg$f47 = function() { return 'AssignGT' };
  var peg$f48 = function() { return 'AssignLT' };
  var peg$f49 = function() { return 'AssignSuccess' };
  var peg$f50 = function() { return 'Assign' };
  var peg$f51 = function() { return 'AssignInc' };
  var peg$f52 = function() { return 'AssignDec' };
  var peg$f53 = function(name, value) {
        return I('DeclareConstant',{value},{name})
      };
  var peg$f54 = function(command) {
        return I('NativeCommand', { command  } )
      };
  var peg$f55 = function(parts) {
          return N('template_parts',{parts})
        };
  var peg$f56 = function(chars) {
          return N('template_chars', { chars:chars.join('') } )
        };
  var peg$f57 = function(count, item) {
          return {count,item}
        };
  var peg$f58 = function(item, count) {
          return {count,item}
        };
  var peg$f59 = function(line) {
        return I('CmdSay',{line})
      };
  var peg$f60 = function(line) {
        return I('CmdPrint',{line})
      };
  var peg$f61 = function(selector, line) {
        return I('CmdTell',{selector,line})
      };
  var peg$f62 = function(left, right) {
        return I('Append',{left,right})
      };
  var peg$f63 = function(left, right) {
        return I('Prepend',{left,right})
      };
  var peg$f64 = function(left, right) {
        return I('Merge',{left,right})
      };
  var peg$f65 = function(index, left, right) {
        return I('Merge',{index,left,right})
      };
  var peg$f66 = function(left) {
        return I('Remove',{left})
      };
  var peg$f67 = function(command) {
      return I('NativeCommand',{command})
    };
  var peg$f68 = function(pos, type, nbt, then) {
        return N('cmd_summon', { pos, type, nbt, then } )
      };
  var peg$f69 = function(selector, args) {
        return N('cmd_give', { selector,...args } )
      };
  var peg$f70 = function(selector, args) {
        return N('cmd_clear', { selector,...args } )
      };
  var peg$f71 = function(pos, block, mode) {
        return N('cmd_setblock', { pos, block, mode } )
      };
  var peg$f72 = function(id, name) {
        return N('bossbar_add', { id, name} )
      };
  var peg$f73 = function(id) {
        return N('bossbar_remove', { id } )
    };
  var peg$f74 = function(selector, tag) {
        return N('tag_set',{selector,tag})
      };
  var peg$f75 = function(selector, tag) {
        return N('tag_unset',{selector,tag})
      };
  var peg$f76 = function(selector, anchor) {
          return [ selector, anchor ]
        };
  var peg$f77 = function(spec) {
      return N('selector_optional', { spec } )
    };
  var peg$f78 = function(spec) {
        return N('selector', { spec } )
      };
  var peg$f79 = function(spec) {
        return N('selector_single', { spec } )
      };
  var peg$f80 = function(uuid) {
        return N('selector_uuid', { uuid } )
      };
  var peg$f81 = function(sort, initial, conditions) {
        return N('selector_spec', { initial,conditions:[...sort||[],...conditions] } )
      };
  var peg$f82 = function(sort) {
          return [N('cond_brackets_lit',{name:'sort',op:'include',value:sort})]
        };
  var peg$f83 = function(sort, limit) {
        if (!limit) {
          return [
            N('cond_brackets_lit',{name:'sort',op:'include',value:sort}),
            N('cond_brackets_lit',{name:'limit',op:'include',value:1})
          ]
        }
        return [
          N('cond_brackets_lit',{name:'sort',op:'include',value:sort}),
          N('cond_brackets',{name:'limit',op:'include',value:limit||1}),
        ]
      };
  var peg$f84 = function(initial) {
        if (!initial.match(/[prase]/)) expected('@p, @r, @a, @s, @e or @<type>')
        return N('selector_initial', { initial } )
      };
  var peg$f85 = function(type) {
        return N('selector_initial_type', { type } )
      };
  var peg$f86 = function(parts) {
        return parts.flat()
      };
  var peg$f87 = function(tag) { return [N('cond_tag', { op:'include', tag }) ]  };
  var peg$f88 = function(tag) { return [N('cond_tag', { op:'exclude', tag }) ]   };
  var peg$f89 = function(value) {
          return N('cond_brackets_nbt', {name:'nbt',op:'include',value} )
        };
  var peg$f90 = function(head, tail) {
          return [head,...tail]
      };
  var peg$f91 = function(node) {
            const [name,op,value] = node;
            return N('cond_brackets', {name,op,value} )
          };
  var peg$f92 = function(node) {
              const [name,op,value] = node;
              return N('cond_brackets_lit', {name,op,value} ) 
           };
  var peg$f93 = function(node) {
            const [name,op,value] = node;
            return N('cond_brackets_nbt', {name,op,value} )
          };
  var peg$f94 = function(name, value) {
            return N('cond_brackets', {name,op:'include',value} )
          };
  var peg$f95 = function(name, value) {
            return N('cond_brackets', {name,op:'include',value} )
        };
  var peg$f96 = function(name, value) {
            return N('cond_brackets_score', {name,op:'score',value} )
        };
  var peg$f97 = function() { return 'include' };
  var peg$f98 = function() { return 'exclude' };
  var peg$f99 = function(head, tail) {
            return N('cond_brackets_braces', {items: [head, ...tail]})
          };
  var peg$f100 = function(name, value) {
            return N('cond_brackets_pair', {name,value})
          };
  var peg$f101 = function() { return "nearest" };
  var peg$f102 = function() { return "furthest" };
  var peg$f103 = function() { return "random" };
  var peg$f104 = function() { return "arbitrary" };
  var peg$f105 = function(predicate) {
        return N('test_predicate', { predicate } )
      };
  var peg$f106 = function(selector) {
        return N('test_entity', { selector } )
      };
  var peg$f107 = function(pos, spec) {
            return N('test_block_pos', { pos, spec } )
        };
  var peg$f108 = function(spec) {
          return N('test_block', { spec } )
        };
  var peg$f109 = function(path) {
          return N('test_datapath', { path } )
        };
  var peg$f110 = function(name) {
        return N('var_id',{name});
      };
  var peg$f111 = function(value) {
        return N('constant_id',{value});
      };
  var peg$f112 = function(holder, id) {
        return N( 'score_id', { holder,id } )
      };
  var peg$f113 = function(name) {
        return N('tag_id',{name})
      };
  var peg$f114 = function(left, right) {
            return N('test_scoreboard_range',{left,right})
          };
  var peg$f115 = function(left, op, right) {
            return N('test_scoreboard',{left,op,right})
          };
  var peg$f116 = function(left, right) {
            return N('test_scoreboard',{left,op:"=",right})
          };
  var peg$f117 = function(id) {
            return N('test_scoreboard_zero',{id})
          };
  var peg$f118 = function(spec) {
          return N('datapath',{spec})
        };
  var peg$f119 = function(selector, path) {
              return N('datapath_entity', { selector, path } )
            };
  var peg$f120 = function(name, path) {
              return N('datapath_storage', { name, path } )
            };
  var peg$f121 = function(position, path) {
              return N('datapath_block', { position,path } )
            };
  var peg$f122 = function(path) { return N('datapath_var', { path } ) };
  var peg$f123 = function(head, tail) {
            return N('nbt_path',{path:[head,...tail]})
          };
  var peg$f124 = function(member) {
              return N('nbt_path_root',member)
            };
  var peg$f125 = function(member) {
              return N('nbt_path_member',member)
            };
  var peg$f126 = function(name, match) {
              return {name,match}
            };
  var peg$f127 = function(index) {
              return N('nbt_path_list_element',{index})
            };
  var peg$f128 = function() {
              return N('nbt_path_list')
            };
  var peg$f129 = function(match) {
              return N('nbt_path_list_match',{match})
            };
  var peg$f130 = function(match) {
              return N('nbt_path_match',{match})
            };
  var peg$f131 = function(resloc, states, nbt) {
          return N('block_spec',{resloc,states,nbt})
        };
  var peg$f132 = function(head, tail) {
            return N('block_states',{states:[head,...tail]})
          };
  var peg$f133 = function(name, value) {
            return N('block_state',{name,value})
          };
  var peg$f134 = function(resloc, nbt) {
            return N('item_spec',{resloc,nbt})
          };
  var peg$f135 = function(nameParts) {
          return V('ResLoc',{ nameParts })
        };
  var peg$f136 = function(head, tail) {
      return [head,...tail]
    };
  var peg$f137 = function(ns, nameParts) {
          return V('ResLoc', {ns,nameParts})
        };
  var peg$f138 = function(ns, nameParts) {
          return V('ResTag', {ns,nameParts})
        };
  var peg$f139 = function(ns, head, tail) {
          return { ns, nameParts:[head,...tail] }
        };
  var peg$f140 = function(head, tail) {
      return N('resname',{parts:[head,...tail]})
    };
  var peg$f141 = function(name) {
          return N('resloc', { name } )
        };
  var peg$f142 = function(ns, name) {
          return N('resloc', { ns,name } )
        };
  var peg$f143 = function(name) {
          return N('resloc_mc', { name } )
        };
  var peg$f144 = function(name) {
          return N('restag', { name } )
        };
  var peg$f145 = function(ns, name) {
          return N('restag', { ns,name } )
        };
  var peg$f146 = function(name) {
          return N('restag_mc', { name } )
        };
  var peg$f147 = function(to) { return N('range_to', { to }) };
  var peg$f148 = function(from) { return N('range_from', { from }) };
  var peg$f149 = function(to) { return N('range_lt_int', { to }) };
  var peg$f150 = function(from) { return N('range_gt_int', { from }) };
  var peg$f151 = function(from, to) { return N('range', { from,to } ) };
  var peg$f152 = function(to) { return N('range_to', { to } ) };
  var peg$f153 = function(from) { return N('range_from', { from } ) };
  var peg$f154 = function(to) { return N('range_lt', { to }) };
  var peg$f155 = function(from) { return N('range_gt', { from }) };
  var peg$f156 = function(name) {
          return N('arg', { type:'value',name } )
        };
  var peg$f157 = function(name) {
            return N('arg', { type:'bool',name } )
          };
  var peg$f158 = function() { return N('boolean_lit', { type:'bool', value: true  } ) };
  var peg$f159 = function() { return N('boolean_lit', { type:'bool', value: false  } ) };
  var peg$f160 = function(name) { 
            return N('arg', { type:'object',name } ) 
          };
  var peg$f161 = function(head, tail) {
              return [head,...tail];
            };
  var peg$f162 = function(members) { return N('object_lit', { type:'object',members:members||[] } ) };
  var peg$f163 = function(name, value) {
            return { name: name, value: value }
          };
  var peg$f164 = function(name) {	return N('arg', { type:'array',name } ) };
  var peg$f165 = function(head, tail) { return [head].concat(tail); };
  var peg$f166 = function(items) { return N('array_lit', { type:'array', items: items || [] } ) };
  var peg$f167 = function(array) {
            return N('array_spread', { array })
          };
  var peg$f168 = function(value) {
          return N('array_value', { value })
        };
  var peg$f169 = function(name) {	
            return N('arg', { type:'number',name } ) 
          };
  var peg$f170 = function(name) {	
            return N('arg', { type:'count',name } ) 
          };
  var peg$f171 = function() {
            return N('number_lit', { type:'int',value:1 } )
          };
  var peg$f172 = function(name) {	
            return N('arg', { type:'int',name } ) 
          };
  var peg$f173 = function() {
            return N('number_lit', { type:'int',value:0 } )
          };
  var peg$f174 = function(value) {
            return N('number_lit', { type:'int',value:+value } )
          };
  var peg$f175 = function() {
            return N('number_lit', { type:'int',value:1,suffix:"b" } )
          };
  var peg$f176 = function() {
            return N('number_lit', { type:'int',value:0,suffix:"b" } )
          };
  var peg$f177 = function(value, suffix) {
            return N('number_lit', { type:'int',value:+value,suffix } )
          };
  var peg$f178 = function(name) {	
            return N('arg', { type:'float',name } ) 
          };
  var peg$f179 = function(value, suffix) {
            return N('number_lit', { type:'float',value:+value,suffix:suffix||"f" } )
          };
  var peg$f180 = function(value, suffix) {
            return N('number_lit', { type:'float',value:+value,suffix } )
          };
  var peg$f181 = function(value) {
            return N('number_lit', { type:'float',value:+value } )
          };
  var peg$f182 = function(value) { return +value };
  var peg$f183 = function(name) { 
            return N('arg',{type:'ident',name}) 
          };
  var peg$f184 = function(word) { 
          return N('string_lit', { type:'ident', value: word  } )
        };
  var peg$f185 = function(name) {
            return N('arg', { type:'string',name } ) 
          };
  var peg$f186 = function(name) {
            return N('arg', { type:'template',name } ) 
          };
  var peg$f187 = function(parts) {
          return N('template_lit', { type:'template', parts } )
        };
  var peg$f188 = function(parts) {
            return N('template_parts',{parts})
          };
  var peg$f189 = function(chars) {
            return N('template_chars', { chars:chars.join('') } )
          };
  var peg$f190 = function(chars) {
            return N('template_chars', { chars } )
          };
  var peg$f191 = function(name) {
            return N('template_expand_arg', { name } )
          };
  var peg$f192 = function() {expected("value")};
  var peg$f193 = function(value) {
          return N('template_expand_value', { value } )
        };
  var peg$f194 = function(name) {
            return N('template_expand_tag', { name } )
          };
  var peg$f195 = function(name) {
            return N('template_expand_var', { name } )
          };
  var peg$f196 = function(name) {
            return N('template_expand_score', { name } )
          };
  var peg$f197 = function(id) {
            return N('template_expand_score_id', { id } )
          };
  var peg$f198 = function() {expected('selector')};
  var peg$f199 = function(selector) {
            return N('template_expand_selector', { selector } )
          };
  var peg$f200 = function() {expected('coordinates')};
  var peg$f201 = function(coords) {
            return N('template_expand_coords', { coords } )
          };
  var peg$f202 = function(name) {
            return N('arg', { type:'string_json',name } ) 
          };
  var peg$f203 = function(value) { 
          return N('string_json', { type:'string_json', value: value  } )
          };
  var peg$f204 = function(name) {
            return N('arg', { type:'string_snbt',name } ) 
          };
  var peg$f205 = function(value) { 
          return N('string_snbt', { type:'string_snbt', value: value  } )
          };
  var peg$f206 = function() { return '\b'; };
  var peg$f207 = function() { return '\f'; };
  var peg$f208 = function() { return '\n'; };
  var peg$f209 = function() { return '\r'; };
  var peg$f210 = function() { return '\t'; };
  var peg$f211 = function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              };
  var peg$f212 = function(sequence) { return sequence; };
  var peg$f213 = function(name) {
          return N('arg', { type:'raw_text',name } ) 
        };
  var peg$f214 = function(open, parts, tag) {
            if(tag == open.tag) return tag;
            expected('</'+open.tag+'>')
          };
  var peg$f215 = function(open, parts, close) { 
          open.parts = parts;
          return open;
        };
  var peg$f216 = function(tag, attr) {
        return N('raw_tag',{tag,attr});
      };
  var peg$f217 = function(parts) {
      return N('raw_line',{parts})
    };
  var peg$f218 = function(chars) {
        return N('raw_chars_ws',{chars})
      };
  var peg$f219 = function(chars) {
          return N('raw_chars_ws',{chars})
        };
  var peg$f220 = function(chars) {
        return N('raw_chars',{chars})
      };
  var peg$f221 = function(name) {
            return N('raw_expand_var', { name } )
          };
  var peg$f222 = function(spec) {
          return N('raw_expand_nbt', { spec } )
        };
  var peg$f223 = function(holder, id) {
            return N('raw_expand_score_id', { holder, id } )
          };
  var peg$f224 = function(word) { error(word +' is a reserved word')};
  var peg$f225 = function(head, tail) {
        return N('RelativeCoords',{ _coords: [head, ...tail]} )
      };
  var peg$f226 = function(d) { return { axis:'x', f:+1, d } };
  var peg$f227 = function(d) { return { axis:'x', f:-1, d } };
  var peg$f228 = function(d) { return { axis:'y', f:+1, d } };
  var peg$f229 = function(d) { return { axis:'y', f:-1, d } };
  var peg$f230 = function(d) { return { axis:'z', f:+1, d } };
  var peg$f231 = function(d) { return { axis:'z', f:-1, d } };
  var peg$f232 = function(head, tail) {
        return N('LocalCoords',{ _coords: [head, ...tail]} )
      };
  var peg$f233 = function(x, y, z) {
          return N('NativeCoords',{x,y,z})
        };
  var peg$f234 = function(x, y, z) {
           return N('NativeCoords',{x,y,z} )
        };
  var peg$f235 = function(x, y) {
        return N('NativeAngles',{x,y} )
     };
  var peg$f236 = function(head, tail) {
        return N('RelativeAngles',{ _coords: [head, ...tail]} )
      };
  var peg$f237 = function(arg) {
          return N('TildeCoord',{arg})
        };
  var peg$f238 = function(arg) {
          return N('CaretCoord',{arg})
        };
  var peg$f239 = function(statement) {
          statement.text = text();
          return statement;
        };
  var peg$f240 = function(mods, executable) {
        return V( 'Execute', { mods, executable } )
    };
  var peg$f241 = function(head, tail) {
        return V('Mods',{mods:[head,...tail]})
      };
  var peg$f242 = function(arg) {
          return V( 'ModAlign', {}, { arg } )
        };
  var peg$f243 = function(arg) {
          return V( 'ModAnchored', {}, { arg } )
        };
  var peg$f244 = function(arg) { 
          return V( 'ModAs', { arg } )
        };
  var peg$f245 = function(arg) { 
          return V( 'ModAt', { arg } )
        };
  var peg$f246 = function(arg) { 
          return V( 'ModFacing', {arg} )
        };
  var peg$f247 = function(arg) { 
          return V( 'ModFor', { arg } )
        };
  var peg$f248 = function(arg) {
        return V( 'ModIn', { arg } )
      };
  var peg$f249 = function(arg) { 
          return V( 'ModPositionedAs', { arg } )
        };
  var peg$f250 = function(arg) { 
          return V( 'ModPositioned', { arg } )
        };
  var peg$f251 = function(arg) { 
          return V( 'ModRotatedAs', { arg } )
        };
  var peg$f252 = function(arg) { 
          return V( 'ModRotated', { arg } )
        };
  var peg$f253 = function(arg) {
        return V('ModRotated', { arg } )
      };
  var peg$f254 = function(arg) {
        return V('ModPositioned', { arg } )
      };
  var peg$f255 = function(test, then, otherwise) {
          return V('IfElse', { test, then, otherwise } )
        };
  var peg$f256 = function(mods, statements, test, then) {
          if (mods) return V('RepeatWithMods',{mods,statements,test,then})
          return V('Repeat',{statements,test,then})
        };
  var peg$f257 = function(time, unit, statements, then) {
          return V('After', { time, statements, then }, {unit} )
        };
  var peg$f258 = function(time, unit, statements, test, then) {
            return V('Every',{statements,test,time,then}, {unit} )
        };
  var peg$f259 = function(time, unit, test, then) {
          return V('Every',{test,time,then},{unit})
        };
  var peg$f260 = function(head, tail, clauses) {
            return N('PromiseCall',{promises:[head,...tail],...clauses})
          };
  var peg$f261 = function(command) {
        return I('NativeCommand',{command})
      };
  var peg$f262 = function(ns, name, args) {
          return N('MacroCallSpec', {ns, name, args})
        };
  var peg$f263 = function(spec) {
      return N("PromiseTrue",{spec})
    };
  var peg$f264 = function(spec) {
      return N("PromiseFalse",{spec})
    };
  var peg$f265 = function(then, _catch) {
      return {then,_catch}
    };
  var peg$f266 = function() {
          return I('Reject')
        };
  var peg$f267 = function() {
          return I('Resolve')
        };
  var peg$f268 = function() {
          return I('CallSelf', {} )
        };
  var peg$f269 = function(resloc) {
        return N('FunctionCall', { resloc } )
      };
  var peg$f270 = function(restag) {
        return I('CallFunctionTag', { restag } )
      };
  var peg$f271 = function() {  return V('LiteralBoolean', {}, { value: true  } ) };
  var peg$f272 = function() { return V('LiteralBoolean', {}, { value: false } ) };
  var peg$f273 = function(value, suffix) { 
        const Class = ({
          i: 'LiteralInt',
          b: 'LiteralByte',
          l: 'LiteralLong',
          s: 'LiteralShort'
        })[suffix||"i"]
        return V(Class, {}, {value})
      };
  var peg$f274 = function(value, suffix) { 
        const Class = ({
          f: 'LiteralFloat',
          d: 'LiteralDouble'
        })[suffix||"f"]
        return V(Class, {}, {value})
      };
  var peg$f275 = function(items) { return V('LiteralArray', { items: items || [] } ) };
  var peg$f276 = function(right) {
          return V('SpreadArray',{right})
        };
  var peg$f277 = function(head, tail) {
            return [head, ...tail];
          };
  var peg$f278 = function(props) { return V('LiteralObject', { props: props || [] } ) };
  var peg$f279 = function(key, value) {
            return  V('LiteralProp', { key, value })
          };
  var peg$f280 = function(right) {
          return V('SpreadObject', {right})
        };
  var peg$f281 = function(value) {
        return V('LiteralString', { value } )
      };
  var peg$f282 = function(value) {
        return V('LiteralString', {},{ value } )
      };
  var peg$f283 = function(arg) {
          return V('FunctionJson',{arg})
        };
  var peg$f284 = function(arg) {
          return V('FunctionSnbt',{arg})
        };
  var peg$f285 = function(resloc, states, nbt) {
        return V('BlockSpec',{resloc,states,nbt})
      };
  var peg$f286 = function(head, tail) {
              return [head, ...tail];
            };
  var peg$f287 = function(head, tail) {
            return V('Tests',{tests:[head,...tail]})
          };
  var peg$f288 = function(arg) {
            return V('TestTrue',{arg})
          };
  var peg$f289 = function(arg) {
          return V('TestFalse',{arg})
        };
  var peg$f290 = function(resloc) {
          return V('ValuePredicate',{resloc})
        };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsefile() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse___();
    s2 = peg$parseDeclareNamespace();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseEOL();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseDeclareNamespace();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseEOL();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseDeclareNamespace();
          if (s6 !== peg$FAILED) {
            s4 = s6;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse___();
      peg$savedPos = s0;
      s0 = peg$f0(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeclareNamespace() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWORD();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEOL();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseGlobals();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f1(s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeclareFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValueResName();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseValueResTag();
            if (s7 !== peg$FAILED) {
              s5 = s7;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseValueResTag();
              if (s7 !== peg$FAILED) {
                s5 = s7;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parseOPEN();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseCLOSE();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              s6 = [s6, s7, s8, s9];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseBEGIN();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseNonGlobals();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseEND();
              if (s8 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f2(s3, s4, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeclareMacro() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWORD();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsemacro_args();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseBEGIN();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseNonGlobals();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseEND();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f3(s3, s4, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGlobals() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseglobal();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseEOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseglobal();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseEOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseglobal();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f4(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNonGlobals() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseEOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseStatement();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseEOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseStatement();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f4(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlockStatements() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNonGlobals();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEND();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatementOrBlock() {
    var s0, s1, s2;

    s0 = peg$parseBlockStatements();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInstruction();
        if (s2 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseglobals() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseglobal();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseEOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseglobal();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseEOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseglobal();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f5(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseglobal() {
    var s0;

    s0 = peg$parseDeclareFunction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDeclareMacro();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDeclareEvent();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDirective();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStatement();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDeclareEvent() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseresloc_mc();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseCONCAT();
          s6 = peg$parseobject();
          if (s6 !== peg$FAILED) {
            s4 = s6;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c4) {
                s6 = peg$c4;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseStatementOrBlock();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f6(s3, s4, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDirective() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsestring();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f7(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c6) {
        s1 = peg$c6;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseValueResLoc();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseLiteralValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f8(s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsearg_name() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWORD();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsemacro_args() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemacro_arg();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsemacro_arg();
          if (s6 !== peg$FAILED) {
            s4 = s6;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsemacro_arg();
            if (s6 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseCLOSE();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f9(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOPEN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse___();
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemacro_arg() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseEQUALS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseLiteralValue();
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f11(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMacroCall() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseValueResLoc();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOPEN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecall_args();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseCLOSE();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f12(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecall_args() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsecall_args_numbered();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCOMMA();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecall_args_named();
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f13(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecall_args_named();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f14(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsecall_args_numbered() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecall_arg_numbered();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecall_arg_numbered();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecall_arg_numbered();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f9(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecall_arg_numbered() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse___();
    s2 = peg$parseLiteralValue();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f15(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecall_args_named() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecall_arg_named();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCOMMA();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecall_arg_named();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCOMMA();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecall_arg_named();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f9(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecall_arg_named() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLiteralValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeclaration() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseDeclareVar();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDeclareScore();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDeclareTag();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseDeclareTag() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseident_lit();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseEOL();
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = undefined;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeclareVar() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s3 = peg$c10;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWORD();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseEQUALS();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseint();
              if (s7 !== peg$FAILED) {
                s5 = s7;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f18(s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeclareScore() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWORD();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsescore_criterion();
            if (s6 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f19(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompareOp() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f21();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f22();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e17); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f23();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 60) {
              s1 = peg$c16;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f24();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 62) {
                s1 = peg$c17;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e19); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f25();
              }
              s0 = s1;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseValueCompare() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseValueAccessor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCompareOp();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseValueAccessor();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueAccessor();
    }

    return s0;
  }

  function peg$parseValueAccessor() {
    var s0;

    s0 = peg$parseValueScore();
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueDataPath();
      if (s0 === peg$FAILED) {
        s0 = peg$parseValueAtom();
      }
    }

    return s0;
  }

  function peg$parseValueAtom() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValueCompare();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueConstant();
      if (s0 === peg$FAILED) {
        s0 = peg$parseValueVariable();
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueBossBarProp();
          if (s0 === peg$FAILED) {
            s0 = peg$parseValueSelector();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLiteralValue();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLValue() {
    var s0;

    s0 = peg$parseValueConstant();
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueVariable();
      if (s0 === peg$FAILED) {
        s0 = peg$parseValueBossBarProp();
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueScore();
          if (s0 === peg$FAILED) {
            s0 = peg$parseValueDataPath();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRValue() {
    var s0;

    s0 = peg$parseInstruction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueCompare();
    }

    return s0;
  }

  function peg$parseValueDataPath() {
    var s0;

    s0 = peg$parseValueDataPathStorage();
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueDataPathVar();
      if (s0 === peg$FAILED) {
        s0 = peg$parseValueDataPathBlock();
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueDataPathGeneric();
        }
      }
    }

    return s0;
  }

  function peg$parseValueDataPathGeneric() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseValueAtom();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s2 = peg$c18;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenbt_path();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueDataPathStorage() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseValueResLoc();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c18) {
          s3 = peg$c18;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenbt_path();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f28(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueDataPathBlock() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePosition();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s2 = peg$c18;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenbt_path();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueDataPathVar() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenbt_path();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f30(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueVariable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWORD();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f31(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueConstant() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWORD();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f32(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueScore() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseValueAtom();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s3 = peg$c20;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseValueAtom();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f33(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueSelector() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseselector_spec();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseValueBossBarProp() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseresloc();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWORD();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f35(s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueNativeCommand() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecommand_parts();
      peg$savedPos = s0;
      s0 = peg$f36(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssign() {
    var s0;

    s0 = peg$parseAssignScaled();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAssignUnary();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAssignBinary();
      }
    }

    return s0;
  }

  function peg$parseAssignScaled() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseLValue();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAssignmentScale();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRValue();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f37(s1, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignBinary() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLValue();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignOp();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseRValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f38(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignUnary() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLValue();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignOpUnary();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f39(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignmentScale() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsetyped_number();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 42) {
        s4 = peg$c23;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAssignOp() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f42();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c26) {
          s1 = peg$c26;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f43();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c27) {
            s1 = peg$c27;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f44();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c28) {
              s1 = peg$c28;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e30); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f45();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c29) {
                s1 = peg$c29;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e31); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f46();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c12) {
                  s1 = peg$c12;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f47();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c13) {
                    s1 = peg$c13;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e15); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f48();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c30) {
                      s1 = peg$c30;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e32); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f49();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s1 = peg$c31;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e33); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f50();
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAssignOpUnary() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c33) {
        s1 = peg$c33;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f52();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseAssignment() {
    var s0;

    s0 = peg$parseAssignConstant();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAssign();
    }

    return s0;
  }

  function peg$parselhand_scoreboard() {
    var s0;

    s0 = peg$parsevar_id();
    if (s0 === peg$FAILED) {
      s0 = peg$parsescore_id();
    }

    return s0;
  }

  function peg$parseAssignConstant() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLiteralValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f53(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNativeCommand() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecommand_parts();
      peg$savedPos = s0;
      s0 = peg$f54(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommand_parts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecommand_part();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecommand_part();
    }
    peg$savedPos = s0;
    s1 = peg$f55(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsecommand_part() {
    var s0;

    s0 = peg$parsetemplate_expand();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecommand_chars();
    }

    return s0;
  }

  function peg$parsecommand_chars() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsecommand_char();
    if (s3 !== peg$FAILED) {
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsecommand_char();
        if (s3 !== peg$FAILED) {
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f56(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecommand_char() {
    var s0, s1, s2, s3;

    s0 = peg$parseno_expand_char_inline();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c34;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsetemplate_expand();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c34;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s3 !== peg$FAILED) {
            s0 = s3;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecmd_arg_count_item() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunsigned_int();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseitem_spec();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f57(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseitem_spec();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseunsigned_int();
            if (s5 !== peg$FAILED) {
              s3 = s5;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f58(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMinityCommand() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseraw_line();
        peg$savedPos = s0;
        s0 = peg$f59(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseraw_line();
          peg$savedPos = s0;
          s0 = peg$f60(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c37) {
          s1 = peg$c37;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseValueSelector();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseraw_line();
                peg$savedPos = s0;
                s0 = peg$f61(s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c38) {
            s1 = peg$c38;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseValueCompare();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseValueCompare();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f62(s3, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c39) {
              s1 = peg$c39;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e41); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseValueCompare();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse__();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseValueCompare();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f63(s3, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c40) {
                s1 = peg$c40;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e42); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseValueCompare();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseValueCompare();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f64(s3, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c41) {
                  s1 = peg$c41;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e43); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseValueCompare();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseValueCompare();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parse__();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseValueCompare();
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f65(s3, s5, s7);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 6) === peg$c42) {
                    s1 = peg$c42;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e44); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseValueCompare();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f66(s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseWrappedCommand() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsecmd();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f67(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecmd() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c43) {
      s1 = peg$c43;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parsePosition();
      if (s4 !== peg$FAILED) {
        s2 = s4;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseresloc_mc();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCONCAT();
          s6 = peg$currPos;
          s7 = peg$parseobject();
          if (s7 !== peg$FAILED) {
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$currPos;
          s8 = peg$parse__();
          if (s8 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c4) {
              s9 = peg$c4;
              peg$currPos += 4;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse__();
              if (s10 !== peg$FAILED) {
                s11 = peg$parseStatementOrBlock();
                if (s11 !== peg$FAILED) {
                  s7 = s11;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f68(s2, s4, s6, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecmd_arg_selector_optional();
        s3 = peg$parsecmd_arg_count_item();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f69(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c45) {
          s1 = peg$c45;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecmd_arg_selector_optional();
          s3 = peg$parsecmd_arg_count_item();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f70(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c46) {
            s1 = peg$c46;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parse_();
            s4 = peg$parsePosition();
            if (s4 !== peg$FAILED) {
              s2 = s4;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s3 = peg$parse__();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseblock_spec();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c47) {
                    s7 = peg$c47;
                    peg$currPos += 7;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e49); }
                  }
                  if (s7 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c48) {
                      s7 = peg$c48;
                      peg$currPos += 4;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e50); }
                    }
                    if (s7 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c49) {
                        s7 = peg$c49;
                        peg$currPos += 7;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e51); }
                      }
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s5 = s7;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f71(s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c21) {
              s1 = peg$c21;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c50) {
                  s3 = peg$c50;
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e52); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse__();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseresloc();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse__();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsestring();
                        if (s7 === peg$FAILED) {
                          s7 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f72(s5, s7);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c21) {
                s1 = peg$c21;
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c42) {
                    s3 = peg$c42;
                    peg$currPos += 6;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e44); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseresloc();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f73(s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c8) {
                  s1 = peg$c8;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseselector();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsetag_id();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f74(s3, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c51) {
                    s1 = peg$c51;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e53); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseselector();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parsetag_id();
                          if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f75(s3, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemod_arg_axes() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c52) {
        s2 = peg$c52;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c53) {
          s2 = peg$c53;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c54) {
            s2 = peg$c54;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c55) {
              s2 = peg$c55;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 120) {
                s2 = peg$c56;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e58); }
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 121) {
                  s2 = peg$c57;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e59); }
                }
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 122) {
                    s2 = peg$c58;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e60); }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c52) {
          s2 = peg$c52;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c53) {
            s2 = peg$c53;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e55); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c54) {
              s2 = peg$c54;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e56); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c55) {
                s2 = peg$c55;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e57); }
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 120) {
                  s2 = peg$c56;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e58); }
                }
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 121) {
                    s2 = peg$c57;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e59); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 122) {
                      s2 = peg$c58;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e60); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemod_arg_anchor() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseANCHOR();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseANCHOR();
        if (s2 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemod_arg_selector_anchor() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselector();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseANCHOR();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseCLOSE();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f76(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselector();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseANCHOR();
            if (s5 !== peg$FAILED) {
              s3 = s5;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f76(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedir_number() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsefloat();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c59) {
        s3 = peg$c59;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserot_angle() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsefloat();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c59) {
        s2 = peg$c59;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s2 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemod_arg_number() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedir_number();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedir_number();
        if (s2 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemod_arg_angle() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parserot_angle();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserot_angle();
        if (s2 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecmd_arg_selector_optional() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse__();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseselector_spec();
      if (s3 !== peg$FAILED) {
        s1 = s3;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f77(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseselector() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseselector_spec();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f78(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseselector_single() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseselector_spec();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f79(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseselector_spec() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseselector_uuid();
    if (s0 === peg$FAILED) {
      s0 = peg$parseselector_complex();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parseselector_uuid() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c60) {
      s1 = peg$c60;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsestring();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f80(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselector_complex() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseselector_sort();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 64) {
      s2 = peg$c62;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 64) {
        s4 = peg$c62;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseselector_initial();
        if (s4 === peg$FAILED) {
          s4 = peg$parseselector_initial_type();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseconditions();
          peg$savedPos = s0;
          s0 = peg$f81(s1, s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselector_sort() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsesort_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c63) {
          s3 = peg$c63;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f82(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesort_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenumber();
          if (s4 !== peg$FAILED) {
            s2 = s4;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f83(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseselector_initial() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f84(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselector_initial_type() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseresloc_or_tag_mc();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseconditions() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecondition_part();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecondition_part();
    }
    peg$savedPos = s0;
    s1 = peg$f86(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsecondition_part() {
    var s0;

    s0 = peg$parsecondition_tag();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecondition_brackets();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecondition_nbt();
      }
    }

    return s0;
  }

  function peg$parsecondition_tag() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseCONCAT();
    if (input.charCodeAt(peg$currPos) === 46) {
      s2 = peg$c64;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsetag_id();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f87(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCONCAT();
      if (input.charCodeAt(peg$currPos) === 33) {
        s2 = peg$c65;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetag_id();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f88(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parsecondition_nbt() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseCONCAT();
    s2 = peg$parseobject();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f89(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }

    return s0;
  }

  function peg$parsecondition_brackets() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseCONCAT();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c66;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      s4 = peg$parsecond_brackets();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parseCOMMA();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsecond_brackets();
          if (s8 !== peg$FAILED) {
            s6 = s8;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsecond_brackets();
            if (s8 !== peg$FAILED) {
              s6 = s8;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse___();
        if (input.charCodeAt(peg$currPos) === 93) {
          s7 = peg$c61;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f90(s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }

    return s0;
  }

  function peg$parsecond_brackets() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 100) {
      s4 = peg$c67;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s5 !== peg$FAILED) {
      s4 = [s4, s5];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsecond_op();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsenumber();
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c68) {
        s2 = peg$c68;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecond_op();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseresloc_or_tag_mc();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c69) {
          s2 = peg$c69;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e78); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecond_op();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseresloc();
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c70) {
            s2 = peg$c70;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecond_op();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseint();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c71) {
              s2 = peg$c71;
              peg$currPos += 6;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e80); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsecond_op();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecond_brackets_scores();
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 12) === peg$c72) {
                s2 = peg$c72;
                peg$currPos += 12;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e81); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsecond_op();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsecond_brackets_advancements();
                  if (s4 !== peg$FAILED) {
                    s2 = [s2, s3, s4];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f91(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c73) {
        s2 = peg$c73;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e82); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecond_op();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesort_name();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c74) {
          s2 = peg$c74;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecond_op();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseGAMEMODE();
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f92(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c8) {
          s2 = peg$c8;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c75) {
            s2 = peg$c75;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e84); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c76) {
              s2 = peg$c76;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e85); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecond_op();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestring();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f91(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c77) {
            s2 = peg$c77;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e86); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecond_op();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseobject();
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f93(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c78) {
              s1 = peg$c78;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e87); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseint_range_match();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f94(s1, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c79) {
                s1 = peg$c79;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e88); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 10) === peg$c80) {
                  s1 = peg$c80;
                  peg$currPos += 10;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e89); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 10) === peg$c81) {
                    s1 = peg$c81;
                    peg$currPos += 10;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e90); }
                  }
                }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parserange_match();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f95(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c20) {
                  s1 = peg$c20;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  s3 = peg$parsescore_objective();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parseint_range_match();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f96(s3, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecond_op() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c14) {
      s2 = peg$c14;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f97();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c82) {
        s2 = peg$c82;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c15) {
          s2 = peg$c15;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f98();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c31;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f97();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsecond_brackets_scores() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecond_brackets_score();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsecond_brackets_score();
          if (s6 !== peg$FAILED) {
            s4 = s6;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecond_brackets_score();
            if (s6 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f99(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecond_brackets_score() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserange();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f100(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecond_brackets_advancements() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecond_brackets_advancement();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsecond_brackets_advancement();
          if (s6 !== peg$FAILED) {
            s4 = s6;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecond_brackets_advancement();
            if (s6 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s4 = peg$parseEND();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f99(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecond_brackets_advancement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseresloc_mc();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebool();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f100(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecond_brackets_advancement_criterion();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecond_brackets_advancement_criterion();
            if (s6 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecond_brackets_advancement_criterion();
              if (s6 !== peg$FAILED) {
                s4 = s6;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          s4 = peg$parseEND();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f99(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecond_brackets_advancement_criterion() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebool();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f100(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesort_name() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c84) {
        s1 = peg$c84;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f101();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c85) {
        s1 = peg$c85;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c86) {
          s1 = peg$c86;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f102();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c87) {
          s1 = peg$c87;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e96); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c88) {
            s1 = peg$c88;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e97); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f103();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c89) {
            s1 = peg$c89;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e98); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c90) {
              s1 = peg$c90;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e99); }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f104();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsetest() {
    var s0;

    s0 = peg$parsetest_predicate();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetest_datapath();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetest_scoreboard();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetest_entity();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetest_block();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetest_predicate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseresloc();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f105(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetest_entity() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseselector();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f106(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetest_block() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCoords();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseblock_spec();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f107(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseblock_spec();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f108(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetest_datapath() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedatapath();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f109(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsevar_name() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWORD();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }

    return s0;
  }

  function peg$parsevar_id() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsevar_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f110(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseconstant_id() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f111(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsescore_id() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseselector();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s3 = peg$c20;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsescore_objective();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f112(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag_id() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestring();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f113(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsescore_objective() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsestring();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parsescoreboard_id() {
    var s0;

    s0 = peg$parsevar_id();
    if (s0 === peg$FAILED) {
      s0 = peg$parseconstant_id();
      if (s0 === peg$FAILED) {
        s0 = peg$parsescore_id();
      }
    }

    return s0;
  }

  function peg$parsescore_criterion() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }

    return s0;
  }

  function peg$parsetest_scoreboard() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsescoreboard_id();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseint_range_match();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f114(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsescoreboard_id();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsetest_scoreboard_op();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parsescoreboard_id();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f115(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetest_scoreboard_inverse() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsescoreboard_id();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c15) {
        s3 = peg$c15;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsescoreboard_id();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f116(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parselhand_scoreboard();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f117(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetest_scoreboard_op() {
    var s0, s1, s2;

    if (input.substr(peg$currPos, 2) === peg$c13) {
      s0 = peg$c13;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s0 = peg$c12;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s0 = peg$c17;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c16;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
              s1 = peg$c31;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c31;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
              if (s2 === peg$FAILED) {
                s2 = null;
              }
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedatapath() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedatapath_spec();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f118(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedatapath_spec() {
    var s0;

    s0 = peg$parsedatapath_storage();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedatapath_var();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedatapath_entity();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedatapath_block();
        }
      }
    }

    return s0;
  }

  function peg$parsedatapath_entity() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseselector_single();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s2 = peg$c18;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenbt_path();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f119(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatapath_storage() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseresloc();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c18) {
          s3 = peg$c18;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenbt_path();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f120(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatapath_block() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePosition();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s2 = peg$c18;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenbt_path();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f121(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedatapath_var() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenbt_path();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f122(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenbt_path() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsenbt_path_head();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenbt_path_tail();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenbt_path_tail();
      }
      peg$savedPos = s0;
      s0 = peg$f123(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenbt_path_head() {
    var s0;

    s0 = peg$parsenbt_path_root();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenbt_path_match();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenbt_path_bracket();
      }
    }

    return s0;
  }

  function peg$parsenbt_path_tail() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenbt_path_member();
    if (s1 !== peg$FAILED) {
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenbt_path_bracket();
    }

    return s0;
  }

  function peg$parsenbt_path_root() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenbt_path_step();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f124(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenbt_path_member() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenbt_path_step();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f125(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenbt_path_step() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsestring();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenbt_path_match();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f126(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenbt_path_part() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c91) {
      s0 = peg$c91;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenbt_path_match();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenbt_path_bracket();
        }
      }
    }

    return s0;
  }

  function peg$parsenbt_path_bracket() {
    var s0;

    s0 = peg$parsenbt_path_list_match();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenbt_path_list();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenbt_path_list_element();
      }
    }

    return s0;
  }

  function peg$parsenbt_path_list_element() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseint();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c61;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f127(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenbt_path_list() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f128();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenbt_path_list_match() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseobject();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c61;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f129(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenbt_path_match() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseobject_lit();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f130(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseblock_spec() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseresloc_or_tag_mc();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCONCAT();
      s3 = peg$parseblock_states();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseCONCAT();
      s5 = peg$currPos;
      s6 = peg$parseobject();
      if (s6 !== peg$FAILED) {
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f131(s1, s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parseblock_states() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      s3 = peg$parseblock_state();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parseCOMMA();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseblock_state();
          if (s7 !== peg$FAILED) {
            s5 = s7;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parseCOMMA();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseblock_state();
            if (s7 !== peg$FAILED) {
              s5 = s7;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse___();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c61;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f132(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseblock_state() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebool();
        if (s3 === peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 === peg$FAILED) {
            s3 = peg$parsestring();
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f133(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseitem_spec() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseresloc_or_tag_mc();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCONCAT();
      s3 = peg$currPos;
      s4 = peg$parseobject();
      if (s4 !== peg$FAILED) {
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f134(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }

    return s0;
  }

  function peg$parseResPart() {
    var s0;

    s0 = peg$parseLiteralIdent();
    if (s0 === peg$FAILED) {
      s0 = peg$parseValueConstant();
    }

    return s0;
  }

  function peg$parseValueResName() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseResNameParts();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f135(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseResNameParts() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseResPart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c22;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseResPart();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c22;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseResPart();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f136(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueResLoc() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseResPart();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c93;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s3 !== peg$FAILED) {
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseResNameParts();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f137(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValueResTag() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c94;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseResPart();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c93;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
        if (s4 !== peg$FAILED) {
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseResNameParts();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f138(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresloc_spec() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseident();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c93;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s3 !== peg$FAILED) {
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseident();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s5 = peg$c22;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseident();
        if (s6 !== peg$FAILED) {
          s4 = s6;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c22;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseident();
          if (s6 !== peg$FAILED) {
            s4 = s6;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f139(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresname() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c22;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseident();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c22;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseident();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f140(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresloc() {
    var s0, s1;

    s0 = peg$parseresloc_full();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseresname();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f141(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseresloc_full() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c93;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseresname();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f142(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresloc_or_tag() {
    var s0;

    s0 = peg$parserestag();
    if (s0 === peg$FAILED) {
      s0 = peg$parseresloc();
    }

    return s0;
  }

  function peg$parseresloc_mc() {
    var s0, s1;

    s0 = peg$parseresloc_full();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseresname();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f143(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parserestag() {
    var s0, s1, s2;

    s0 = peg$parserestag_full();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c94;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseresname();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f144(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserestag_full() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c94;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseident();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c93;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseresname();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f145(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserestag_mc() {
    var s0, s1, s2;

    s0 = peg$parserestag_full();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c94;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseresname();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f146(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseresloc_or_tag_mc() {
    var s0;

    s0 = peg$parserestag_mc();
    if (s0 === peg$FAILED) {
      s0 = peg$parseresloc_mc();
    }

    return s0;
  }

  function peg$parseint_range_match() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c31;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      s4 = peg$parseint_range();
      if (s4 !== peg$FAILED) {
        s0 = s4;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseint();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f147(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseint();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f148(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 60) {
            s1 = peg$c16;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseint();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f149(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s1 = peg$c17;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e19); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parseint();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f150(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseint_range() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c95) {
        s2 = peg$c95;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseint();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f151(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f152(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseint();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c95) {
            s2 = peg$c95;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f153(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseint();
        }
      }
    }

    return s0;
  }

  function peg$parserange_match() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c31;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse_();
      s4 = peg$parserange();
      if (s4 !== peg$FAILED) {
        s0 = s4;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsenumber();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f147(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f148(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 60) {
            s1 = peg$c16;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parsenumber();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f154(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s1 = peg$c17;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e19); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s3 = peg$parsenumber();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f155(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parserange() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c95) {
        s2 = peg$c95;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenumber();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f151(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e111); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f152(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c95) {
            s2 = peg$c95;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f153(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsenumber();
        }
      }
    }

    return s0;
  }

  function peg$parsevalue() {
    var s0;

    s0 = peg$parsevalue_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsevalue_lit();
    }

    return s0;
  }

  function peg$parsevalue_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f156(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsevalue_lit() {
    var s0;

    s0 = peg$parseobject();
    if (s0 === peg$FAILED) {
      s0 = peg$parsearray();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestring();
        }
      }
    }

    return s0;
  }

  function peg$parsetyped_value() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsetyped_value_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetyped_value_lit();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }

    return s0;
  }

  function peg$parsetyped_value_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f156(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetyped_value_lit() {
    var s0;

    s0 = peg$parseobject();
    if (s0 === peg$FAILED) {
      s0 = peg$parsearray();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetyped_number();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestring();
        }
      }
    }

    return s0;
  }

  function peg$parsebool() {
    var s0;

    s0 = peg$parsebool_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebool_lit();
    }

    return s0;
  }

  function peg$parsebool_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f157(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebool_lit() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f158();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c97) {
        s1 = peg$c97;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f159();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseobject() {
    var s0;

    s0 = peg$parseobject_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parseobject_lit();
    }

    return s0;
  }

  function peg$parseobject_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f160(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseobject_lit() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      s3 = peg$currPos;
      s4 = peg$parsemember();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parseCOMMA();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsemember();
          if (s8 !== peg$FAILED) {
            s6 = s8;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsemember();
            if (s8 !== peg$FAILED) {
              s6 = s8;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parseCOMMA();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s3;
        s3 = peg$f161(s4, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse___();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c98;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f162(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemember() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsestring();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c93;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse___();
        s5 = peg$parsetyped_value();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f163(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearray() {
    var s0;

    s0 = peg$parsearray_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsearray_lit();
    }

    return s0;
  }

  function peg$parsearray_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f164(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsearray_lit() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      s3 = peg$currPos;
      s4 = peg$parsearray_item();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parseCOMMA();
        if (s7 !== peg$FAILED) {
          s8 = peg$parsearray_item();
          if (s8 !== peg$FAILED) {
            s6 = s8;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsearray_item();
            if (s8 !== peg$FAILED) {
              s6 = s8;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parseCOMMA();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s3;
        s3 = peg$f165(s4, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse___();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f166(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearray_item() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsearray();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f167(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetyped_value();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f168(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsetyped_number() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f169(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsetyped_number_lit();
    }

    return s0;
  }

  function peg$parsetyped_number_lit() {
    var s0;

    s0 = peg$parsetyped_float_lit();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetyped_int_lit();
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f169(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumber_lit();
    }

    return s0;
  }

  function peg$parsenumber_lit() {
    var s0;

    s0 = peg$parsefloat_lit();
    if (s0 === peg$FAILED) {
      s0 = peg$parseint_lit();
    }

    return s0;
  }

  function peg$parseunsigned_int() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f170(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseunsigned_int_lit();
    }

    return s0;
  }

  function peg$parseunsigned_int_lit() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseUNSIGNED();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f171();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseint() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f172(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseint_lit();
    }

    return s0;
  }

  function peg$parseint_lit() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f171();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c97) {
        s1 = peg$c97;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f173();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINT();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f174(s1);
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parsetyped_int() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f172(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsetyped_int_lit();
    }

    return s0;
  }

  function peg$parsetyped_int_lit() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f175();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c97) {
        s1 = peg$c97;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f176();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINT();
        if (s1 !== peg$FAILED) {
          if (peg$r5.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e118); }
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f177(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parsetyped_float() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f178(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsetyped_float_lit();
    }

    return s0;
  }

  function peg$parsefloat() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f178(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsefloat_lit();
    }

    return s0;
  }

  function peg$parsetyped_float_lit() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseFLOAT();
    if (s1 !== peg$FAILED) {
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e119); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f179(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseINT();
      if (s1 !== peg$FAILED) {
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f180(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefloat_lit() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseFLOAT();
    if (s1 === peg$FAILED) {
      s1 = peg$parseINT();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f181(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLOAT() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parseINT();
    if (s3 !== peg$FAILED) {
      s4 = peg$currPos;
      s5 = peg$parseFRAC();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseEXP();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = peg$parseEXP();
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f182(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXP() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e121); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$parseDIGIT();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFRAC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINT() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parseUNSIGNED();
    if (s4 !== peg$FAILED) {
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f182(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUNSIGNED() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseZERO();
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseZERO();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseDIGIT();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseDIGIT();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f182(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseZERO() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c100;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    if (peg$r10.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }

    return s0;
  }

  function peg$parseDIGIT_NO_ZERO() {
    var s0;

    if (peg$r10.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }

    return s0;
  }

  function peg$parseident() {
    var s0;

    s0 = peg$parseident_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parseident_lit();
    }

    return s0;
  }

  function peg$parseident_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f183(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseident_lit() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWORD();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f184(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring() {
    var s0;

    s0 = peg$parsestring_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring_lit();
    }

    return s0;
  }

  function peg$parsestring_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f185(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring_lit() {
    var s0;

    s0 = peg$parsetemplate_lit();
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring_json_lit();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring_snbt_lit();
        if (s0 === peg$FAILED) {
          s0 = peg$parseident_lit();
          if (s0 === peg$FAILED) {
            s0 = peg$parseraw_tag();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetemplate() {
    var s0;

    s0 = peg$parsetemplate_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetemplate_lit();
    }

    return s0;
  }

  function peg$parsetemplate_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f186(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetemplate_lit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetemplate_part();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetemplate_part();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c101;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f187(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_parts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsetemplate_part();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsetemplate_part();
    }
    peg$savedPos = s0;
    s1 = peg$f188(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsetemplate_part() {
    var s0;

    s0 = peg$parsetemplate_expand();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetemplate_chars();
    }

    return s0;
  }

  function peg$parsetemplate_expand() {
    var s0;

    s0 = peg$parsetemplate_expand_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetemplate_expand_value();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetemplate_expand_var();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetemplate_expand_tag();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetemplate_expand_score();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetemplate_expand_score_id();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetemplate_expand_selector();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetemplate_expand_coords();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetemplate_chars() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsetemplate_char();
    if (s3 !== peg$FAILED) {
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsetemplate_char();
        if (s3 !== peg$FAILED) {
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f189(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetemplate_sep() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$r11.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f190(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetemplate_char() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (peg$r12.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsechar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c102;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e129); }
        }
        if (s2 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetemplate_expand_arg() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c103) {
      s1 = peg$c103;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetemplate_parts();
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c98;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f191(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_expand_value() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c104) {
      s1 = peg$c104;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalue();
      if (s2 === peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$f192();
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c98;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e115); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f193(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_expand_tag() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c105) {
      s1 = peg$c105;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetemplate_parts();
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c98;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f194(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_expand_var() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c106) {
      s1 = peg$c106;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetemplate_parts();
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c98;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f195(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_expand_score() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c107) {
      s1 = peg$c107;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetemplate_parts();
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c98;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f196(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_expand_score_id() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsescore_id();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c98;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e115); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f197(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_expand_selector() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      s4 = peg$parseselector_sort();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (input.charCodeAt(peg$currPos) === 64) {
        s5 = peg$c62;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 64) {
          s7 = peg$c62;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseselector();
        if (s4 !== peg$FAILED) {
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$f198();
          if (s3) {
            s3 = undefined;
          } else {
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s4 = peg$c98;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e115); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f199(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetemplate_expand_coords() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c108;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsePosition();
        if (s4 !== peg$FAILED) {
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$f200();
          if (s3) {
            s3 = undefined;
          } else {
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s4 = peg$c98;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e115); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f201(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring_json() {
    var s0;

    s0 = peg$parsestring_json_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring_json_lit();
    }

    return s0;
  }

  function peg$parsestring_json_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f202(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring_json_lit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c109) {
      s1 = peg$c109;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f203(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestring_snbt() {
    var s0;

    s0 = peg$parsestring_snbt_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parsestring_snbt_lit();
    }

    return s0;
  }

  function peg$parsestring_snbt_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f204(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestring_snbt_lit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c110) {
      s1 = peg$c110;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetyped_value();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f205(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseno_expand_char_inline() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (peg$r13.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsechar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseno_expand_char() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (peg$r14.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsechar();
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechar() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$parseunescaped();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 98) {
          s3 = peg$c111;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e140); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f206();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 102) {
            s3 = peg$c112;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e141); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$f207();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 110) {
              s3 = peg$c113;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e142); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$f208();
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 114) {
                s3 = peg$c114;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e143); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$f209();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 116) {
                  s3 = peg$c115;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e144); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$f210();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 117) {
                    s3 = peg$c116;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e145); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$currPos;
                    s6 = peg$parseHEXDIG();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseHEXDIG();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseHEXDIG();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseHEXDIG();
                          if (s9 !== peg$FAILED) {
                            s6 = [s6, s7, s8, s9];
                            s5 = s6;
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                      s4 = input.substring(s4, peg$currPos);
                    } else {
                      s4 = s5;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s2 = peg$f211(s4);
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e129); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f212(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseescape() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c102;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }

    return s0;
  }

  function peg$parsequotation_mark() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c101;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    return s0;
  }

  function peg$parseunescaped() {
    var s0;

    if (peg$r15.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }

    return s0;
  }

  function peg$parseraw_text() {
    var s0;

    s0 = peg$parseraw_text_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parseraw_tag();
    }

    return s0;
  }

  function peg$parseraw_text_arg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearg_name();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f213(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseraw_tag() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseraw_tag_open();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      s3 = peg$parseGT();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseraw_part();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseraw_part();
        }
        s5 = peg$currPos;
        s6 = peg$parseraw_tag_close();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s5;
          s6 = peg$f214(s1, s4, s6);
        }
        s5 = s6;
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f215(s1, s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseraw_tag_open();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSGT();
        if (s2 !== peg$FAILED) {
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseraw_tag_open() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseLTS();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWORD();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parse___();
          s7 = peg$parseraw_attr();
          if (s7 !== peg$FAILED) {
            s5 = s7;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parse___();
            s7 = peg$parseraw_attr();
            if (s7 !== peg$FAILED) {
              s5 = s7;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          peg$savedPos = s0;
          s0 = peg$f216(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseraw_attr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEQUALS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevalue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseraw_tag_close() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseLTS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWORD();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseGT();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseraw_line() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseraw_line_part();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseraw_line_part();
    }
    peg$savedPos = s0;
    s1 = peg$f217(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseraw_line_part() {
    var s0, s1, s2, s3;

    s0 = peg$parseraw_tag();
    if (s0 === peg$FAILED) {
      s0 = peg$parseraw_expand();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse__();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f218(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$parseraw_chars();
        }
      }
    }

    return s0;
  }

  function peg$parseraw_part() {
    var s0, s1, s2;

    s0 = peg$parseraw_tag();
    if (s0 === peg$FAILED) {
      s0 = peg$parseraw_expand();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseWS();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseWS();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f219(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$parseraw_chars();
        }
      }
    }

    return s0;
  }

  function peg$parseraw_chars() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    s5 = peg$parseLT();
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$parseWS();
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseraw_char();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLT();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseWS();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseraw_char();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f220(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseraw_char() {
    var s0, s1, s2, s3;

    s0 = peg$parseno_expand_char();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c34;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseraw_expand();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c34;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
          if (s3 !== peg$FAILED) {
            s0 = s3;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseraw_expand() {
    var s0;

    s0 = peg$parsetemplate_expand_arg();
    if (s0 === peg$FAILED) {
      s0 = peg$parseraw_expand_var();
      if (s0 === peg$FAILED) {
        s0 = peg$parseraw_expand_score_id();
        if (s0 === peg$FAILED) {
          s0 = peg$parseraw_expand_nbt();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetemplate_expand_value();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetemplate_expand_tag();
              if (s0 === peg$FAILED) {
                s0 = peg$parsetemplate_expand_score();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetemplate_expand_selector();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsetemplate_expand_coords();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseraw_expand_var() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c106) {
      s1 = peg$c106;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetemplate_parts();
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c98;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f221(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseraw_expand_nbt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedatapath_spec();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c98;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e115); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f222(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseraw_expand_score_id() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselector();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c20) {
          s4 = peg$c20;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parsescore_objective();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s7 = peg$c98;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e115); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f223(s2, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLTS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c117) {
      s1 = peg$c117;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (input.charCodeAt(peg$currPos) === 62) {
      s2 = peg$c17;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSGT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (input.substr(peg$currPos, 2) === peg$c118) {
      s2 = peg$c118;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCONCAT() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 38) {
      s2 = peg$c119;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parseOPEN() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c108;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCLOSE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (input.charCodeAt(peg$currPos) === 41) {
      s2 = peg$c120;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBEGIN() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c34;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEND() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (input.charCodeAt(peg$currPos) === 125) {
      s2 = peg$c98;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse___();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c121;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEQUALS() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 61) {
      s2 = peg$c31;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIG() {
    var s0;

    if (peg$r16.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parseWORD_INIT() {
    var s0;

    if (peg$r17.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }

    return s0;
  }

  function peg$parseWORD_CHAR() {
    var s0;

    if (peg$r18.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }

    return s0;
  }

  function peg$parseWORD() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseWORD_INIT();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseWORD_CHAR();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseWORD_CHAR();
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseSPACE();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseSPACE();
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e155); }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseSPACE();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseSPACE();
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }

    return s0;
  }

  function peg$parse___() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseWSS();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWSS();
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e155); }

    return s0;
  }

  function peg$parseSPACE() {
    var s0;

    if (peg$r19.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }

    return s0;
  }

  function peg$parseWS() {
    var s0;

    if (peg$r20.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }

    return s0;
  }

  function peg$parseWSS() {
    var s0;

    s0 = peg$parseWS();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEOL_COMMENT();
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    if (peg$r21.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r21.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e159); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse___();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseEOL_COMMENT();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }

    return s0;
  }

  function peg$parseEOL_COMMENT() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c122) {
      s2 = peg$c122;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r22.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e161); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r22.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e161); }
        }
      }
      s4 = [];
      if (peg$r21.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e159); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r21.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e159); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse___();
        if (s5 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4, s5];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNAME_OR_DIE() {
    var s0, s1, s2;

    s0 = peg$parseNAME();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWORD();
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$f224(s1);
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseNAME() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseRESERVED();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (peg$r23.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e162); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        if (peg$r24.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e163); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$r24.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e163); }
          }
        }
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRESERVED() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCONDITION();
    if (s1 === peg$FAILED) {
      s1 = peg$parseGAMEMODE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSORT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMOD();
          if (s1 === peg$FAILED) {
            s1 = peg$parseANCHOR();
            if (s1 === peg$FAILED) {
              s1 = peg$parseDIRECTION();
              if (s1 === peg$FAILED) {
                s1 = peg$parseKEYWORD();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseDECLARE();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsePSEUDO();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseCOMMAND();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseSTRINGIFY();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseBOOLEAN();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseOTHER();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (peg$r25.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e164); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCONDITION() {
    var s0;

    if (input.substr(peg$currPos, 12) === peg$c72) {
      s0 = peg$c72;
      peg$currPos += 12;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c79) {
        s0 = peg$c79;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c74) {
          s0 = peg$c74;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c78) {
            s0 = peg$c78;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e87); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c70) {
              s0 = peg$c70;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e79); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c76) {
                s0 = peg$c76;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e85); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c71) {
                  s0 = peg$c71;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e80); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c73) {
                    s0 = peg$c73;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e82); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c68) {
                      s0 = peg$c68;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e77); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 10) === peg$c80) {
                        s0 = peg$c80;
                        peg$currPos += 10;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e89); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 10) === peg$c81) {
                          s0 = peg$c81;
                          peg$currPos += 10;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e90); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseGAMEMODE() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c123) {
      s0 = peg$c123;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c124) {
        s0 = peg$c124;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e166); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c125) {
          s0 = peg$c125;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e167); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c126) {
            s0 = peg$c126;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e168); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSORT() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c85) {
      s0 = peg$c85;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c86) {
        s0 = peg$c86;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c89) {
          s0 = peg$c89;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e98); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c83) {
            s0 = peg$c83;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e92); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c90) {
              s0 = peg$c90;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e99); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c87) {
                s0 = peg$c87;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e96); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c63) {
                  s0 = peg$c63;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c88) {
                    s0 = peg$c88;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e97); }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMOD() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c127) {
      s0 = peg$c127;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c128) {
        s0 = peg$c128;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e170); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c129) {
          s0 = peg$c129;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e171); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c130) {
            s0 = peg$c130;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e172); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c131) {
              s0 = peg$c131;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e173); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c132) {
                s0 = peg$c132;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e174); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c133) {
                  s0 = peg$c133;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e175); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c134) {
                    s0 = peg$c134;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e176); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 10) === peg$c135) {
                      s0 = peg$c135;
                      peg$currPos += 10;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e177); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 9) === peg$c69) {
                        s0 = peg$c69;
                        peg$currPos += 9;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e78); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c136) {
                          s0 = peg$c136;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e178); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c137) {
                            s0 = peg$c137;
                            peg$currPos += 7;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e179); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseANCHOR() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c138) {
      s0 = peg$c138;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c139) {
        s0 = peg$c139;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
    }

    return s0;
  }

  function peg$parseDIRECTION() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c140) {
      s0 = peg$c140;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c141) {
        s0 = peg$c141;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e183); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c142) {
          s0 = peg$c142;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e184); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c143) {
            s0 = peg$c143;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e185); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c144) {
              s0 = peg$c144;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e186); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c145) {
                s0 = peg$c145;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e187); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c146) {
                  s0 = peg$c146;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e188); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c147) {
                    s0 = peg$c147;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e189); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c148) {
                      s0 = peg$c148;
                      peg$currPos += 5;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e190); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c149) {
                        s0 = peg$c149;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e191); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c150) {
                          s0 = peg$c150;
                          peg$currPos += 6;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e192); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c151) {
                            s0 = peg$c151;
                            peg$currPos += 4;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e193); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseKEYWORD() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c152) {
      s0 = peg$c152;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c153) {
        s0 = peg$c153;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e195); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c154) {
          s0 = peg$c154;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e196); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c155) {
            s0 = peg$c155;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e197); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c156) {
              s0 = peg$c156;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e198); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c5) {
                s0 = peg$c5;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c157) {
                  s0 = peg$c157;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e199); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c158) {
                    s0 = peg$c158;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e200); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c4) {
                      s0 = peg$c4;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c159) {
                        s0 = peg$c159;
                        peg$currPos += 5;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e201); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c160) {
                          s0 = peg$c160;
                          peg$currPos += 6;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e202); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c3) {
                            s0 = peg$c3;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e3); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c161) {
                              s0 = peg$c161;
                              peg$currPos += 5;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e203); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c162) {
                                s0 = peg$c162;
                                peg$currPos += 4;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e204); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c163) {
                                  s0 = peg$c163;
                                  peg$currPos += 6;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e205); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c164) {
                                    s0 = peg$c164;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e206); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePSEUDO() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c165) {
      s0 = peg$c165;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c166) {
        s0 = peg$c166;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e208); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c167) {
          s0 = peg$c167;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e209); }
        }
      }
    }

    return s0;
  }

  function peg$parseDECLARE() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c1) {
      s0 = peg$c1;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c2) {
        s0 = peg$c2;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c0) {
          s0 = peg$c0;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c11) {
            s0 = peg$c11;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c8) {
              s0 = peg$c8;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c9) {
                s0 = peg$c9;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseCOMMAND() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c38) {
      s0 = peg$c38;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c168) {
        s0 = peg$c168;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e210); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c40) {
          s0 = peg$c40;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c21) {
            s0 = peg$c21;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c45) {
              s0 = peg$c45;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e47); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c168) {
                s0 = peg$c168;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e210); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c44) {
                  s0 = peg$c44;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e46); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c39) {
                    s0 = peg$c39;
                    peg$currPos += 7;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e41); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c42) {
                      s0 = peg$c42;
                      peg$currPos += 6;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e44); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c36) {
                        s0 = peg$c36;
                        peg$currPos += 5;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e38); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c35) {
                          s0 = peg$c35;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e37); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8) === peg$c46) {
                            s0 = peg$c46;
                            peg$currPos += 8;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e48); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c43) {
                              s0 = peg$c43;
                              peg$currPos += 6;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e45); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c8) {
                                s0 = peg$c8;
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e10); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c51) {
                                  s0 = peg$c51;
                                  peg$currPos += 5;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e53); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3) === peg$c50) {
                                    s0 = peg$c50;
                                    peg$currPos += 3;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e52); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c42) {
                                      s0 = peg$c42;
                                      peg$currPos += 6;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e44); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c169) {
                                        s0 = peg$c169;
                                        peg$currPos += 3;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e211); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 7) === peg$c170) {
                                          s0 = peg$c170;
                                          peg$currPos += 7;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e212); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 5) === peg$c171) {
                                            s0 = peg$c171;
                                            peg$currPos += 5;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$e213); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 7) === peg$c172) {
                                              s0 = peg$c172;
                                              peg$currPos += 7;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$e214); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 5) === peg$c173) {
                                                s0 = peg$c173;
                                                peg$currPos += 5;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$e215); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c174) {
                                                  s0 = peg$c174;
                                                  peg$currPos += 5;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$e216); }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBOOLEAN() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c97) {
      s0 = peg$c97;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c96) {
        s0 = peg$c96;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e113); }
      }
    }

    return s0;
  }

  function peg$parseSTRINGIFY() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c109) {
      s0 = peg$c109;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c77) {
        s0 = peg$c77;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c110) {
          s0 = peg$c110;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
      }
    }

    return s0;
  }

  function peg$parseOTHER() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c59) {
      s0 = peg$c59;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parsePosition() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCoords();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseNativeCoords();
    }

    return s0;
  }

  function peg$parseCoords() {
    var s0;

    s0 = peg$parseRelativeCoords();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLocalCoords();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNativeCoords();
      }
    }

    return s0;
  }

  function peg$parseRelativeCoords() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRelativeCoord();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseRelativeCoord();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRelativeCoord();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f225(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRelativeCoord() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c143) {
      s1 = peg$c143;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefloat();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f226(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c151) {
        s1 = peg$c151;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e193); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefloat();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f227(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c149) {
          s1 = peg$c149;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e191); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefloat();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f228(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c141) {
            s1 = peg$c141;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e183); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsefloat();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f229(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c148) {
              s1 = peg$c148;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e190); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsefloat();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f230(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c146) {
                s1 = peg$c146;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e188); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsefloat();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f231(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLocalCoords() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLocalCoord();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseLocalCoord();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLocalCoord();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f232(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLocalCoord() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c145) {
      s1 = peg$c145;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefloat();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f226(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c147) {
        s1 = peg$c147;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e189); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefloat();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f227(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c150) {
          s1 = peg$c150;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e192); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefloat();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f228(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c142) {
            s1 = peg$c142;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e184); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsefloat();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f229(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c144) {
              s1 = peg$c144;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e186); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsefloat();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f230(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c140) {
                s1 = peg$c140;
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e182); }
              }
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c175) {
                  s2 = peg$c175;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e217); }
                }
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                s3 = peg$parse__();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsefloat();
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f231(s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNativeCoords() {
    var s0;

    s0 = peg$parseNativeLocalCoords();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNativeWorldCoords();
    }

    return s0;
  }

  function peg$parseNativeWorldCoords() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNativeCoord();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNativeCoord();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseNativeCoord();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f233(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNativeCoord() {
    var s0;

    s0 = peg$parseTildeCoord();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefloat();
    }

    return s0;
  }

  function peg$parseNativeLocalCoords() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCaretCoord();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCaretCoord();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCaretCoord();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f234(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRotation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAngles();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseNativeAngles();
    }

    return s0;
  }

  function peg$parseAngles() {
    var s0;

    s0 = peg$parseNativeAngles();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRelativeAngles();
    }

    return s0;
  }

  function peg$parseNativeAngles() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNativeCoord();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c59) {
        s2 = peg$c59;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseNativeCoord();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c59) {
            s5 = peg$c59;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e61); }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f235(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRelativeAngles() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRelativeAngle();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseRelativeAngles();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRelativeAngles();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f236(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRelativeAngle() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c145) {
      s1 = peg$c145;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAngle();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f226(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c147) {
        s1 = peg$c147;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e189); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAngle();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f227(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c149) {
          s1 = peg$c149;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e191); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseAngle();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f228(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c141) {
            s1 = peg$c141;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e183); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseAngle();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f229(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAngle() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsefloat();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c59) {
        s2 = peg$c59;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s2 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTildeCoord() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c176;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e218); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefloat();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f237(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCaretCoord() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c177;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e219); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefloat();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f238(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatements() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStatement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseEOL();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseStatement();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseEOL();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseStatement();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f5(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatement() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseInstruction();
    if (s1 === peg$FAILED) {
      s1 = peg$parseDeclaration();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f239(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseInstruction() {
    var s0;

    s0 = peg$parseExecution();
    if (s0 === peg$FAILED) {
      s0 = peg$parseConstruct();
      if (s0 === peg$FAILED) {
        s0 = peg$parseWrappedConstruct();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePseudoCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCallFunctionTag();
            if (s0 === peg$FAILED) {
              s0 = peg$parseMacroCall();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAssignment();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseNativeCommand();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseMinityCommand();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseWrappedCommand();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseExecution() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseModifiers();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStatementOrBlock();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f240(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModifiers() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseModifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseModifier();
        if (s5 !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseModifier();
          if (s5 !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f241(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModifier() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c127) {
      s1 = peg$c127;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemod_arg_axes();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f242(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c128) {
        s1 = peg$c128;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e170); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemod_arg_anchor();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f243(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c129) {
          s1 = peg$c129;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e171); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseValueCompare();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f244(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c130) {
            s1 = peg$c130;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e172); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseValueCompare();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f245(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c131) {
              s1 = peg$c131;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e173); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsemod_arg_selector_anchor();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f246(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c132) {
                s1 = peg$c132;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e174); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseValueCompare();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f247(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c133) {
                  s1 = peg$c133;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e175); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseValueCompare();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f248(s3);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c134) {
                    s1 = peg$c134;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e176); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c178) {
                      s2 = peg$c178;
                      peg$currPos += 7;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e220); }
                    }
                    if (s2 === peg$FAILED) {
                      s2 = null;
                    }
                    s3 = peg$parse__();
                    if (s3 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c129) {
                        s4 = peg$c129;
                        peg$currPos += 2;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e171); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parse__();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseValueCompare();
                          if (s6 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f249(s6);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c134) {
                      s1 = peg$c134;
                      peg$currPos += 3;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e176); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c178) {
                        s2 = peg$c178;
                        peg$currPos += 7;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e220); }
                      }
                      if (s2 === peg$FAILED) {
                        s2 = null;
                      }
                      s3 = peg$parse__();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsePosition();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f250(s4);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 3) === peg$c136) {
                        s1 = peg$c136;
                        peg$currPos += 3;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e178); }
                      }
                      if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c179) {
                          s2 = peg$c179;
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e221); }
                        }
                        if (s2 === peg$FAILED) {
                          s2 = null;
                        }
                        s3 = peg$parse__();
                        if (s3 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c129) {
                            s4 = peg$c129;
                            peg$currPos += 2;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e171); }
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parse__();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseValueCompare();
                              if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f251(s6);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c136) {
                          s1 = peg$c136;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e178); }
                        }
                        if (s1 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c179) {
                            s2 = peg$c179;
                            peg$currPos += 4;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e221); }
                          }
                          if (s2 === peg$FAILED) {
                            s2 = null;
                          }
                          s3 = peg$parse__();
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsePosition();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f252(s4);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseRelativeAngles();
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f253(s1);
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseRelativeCoords();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f254(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseLocalCoords();
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f254(s1);
                              }
                              s0 = s1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseConstruct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseTests();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStatementOrBlock();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c153) {
            s5 = peg$c153;
            peg$currPos += 4;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e195); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseStatementOrBlock();
            if (s6 !== peg$FAILED) {
              s3 = s6;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f255(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c157) {
        s1 = peg$c157;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e199); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseModifiers();
          if (s4 !== peg$FAILED) {
            s2 = s4;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseStatementOrBlock();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLoopTests();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c4) {
                s8 = peg$c4;
                peg$currPos += 4;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseStatementOrBlock();
                if (s9 !== peg$FAILED) {
                  s6 = s9;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f256(s2, s3, s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c152) {
          s1 = peg$c152;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e194); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefloat();
            if (s3 !== peg$FAILED) {
              if (peg$r26.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e222); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseStatementOrBlock();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c4) {
                      s8 = peg$c4;
                      peg$currPos += 4;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e4); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseStatementOrBlock();
                      if (s9 !== peg$FAILED) {
                        s6 = s9;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f257(s3, s4, s5, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c154) {
            s1 = peg$c154;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e196); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsefloat();
              if (s3 !== peg$FAILED) {
                if (peg$r26.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e222); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseStatementOrBlock();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$currPos;
                    s7 = peg$parse__();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseLoopTests();
                      if (s8 !== peg$FAILED) {
                        s6 = s8;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    s7 = peg$currPos;
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c4) {
                        s9 = peg$c4;
                        peg$currPos += 4;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e4); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseStatementOrBlock();
                        if (s10 !== peg$FAILED) {
                          s7 = s10;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f258(s3, s4, s5, s6, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c154) {
              s1 = peg$c154;
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e196); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsefloat();
                if (s3 !== peg$FAILED) {
                  if (peg$r26.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e222); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseLoopTests();
                      if (s7 !== peg$FAILED) {
                        s5 = s7;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    s6 = peg$currPos;
                    s7 = peg$parse__();
                    if (s7 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c4) {
                        s8 = peg$c4;
                        peg$currPos += 4;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e4); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseStatementOrBlock();
                        if (s9 !== peg$FAILED) {
                          s6 = s9;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f259(s3, s4, s5, s6);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseWrappedConstruct() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsePromise();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parse__();
      if (s5 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c155) {
          s6 = peg$c155;
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e197); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse__();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsePromise();
            if (s8 !== peg$FAILED) {
              s4 = s8;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parse__();
        if (s5 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c155) {
            s6 = peg$c155;
            peg$currPos += 3;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e197); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsePromise();
              if (s8 !== peg$FAILED) {
                s4 = s8;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parseThenCatchClause();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s1;
        s1 = peg$f260(s2, s3, s4);
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f261(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMacroCallSpec() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseWORD();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c93;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s3 !== peg$FAILED) {
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseNAME();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseOPEN();
      if (s5 !== peg$FAILED) {
        s6 = peg$parsecall_args();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseCLOSE();
          if (s7 !== peg$FAILED) {
            s3 = s6;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f262(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePromise() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c162) {
      s1 = peg$c162;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePromiseTrue();
        if (s3 !== peg$FAILED) {
          s0 = s3;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c162) {
        s1 = peg$c162;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e204); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOPEN();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePromiseTrue();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCLOSE();
            if (s4 !== peg$FAILED) {
              s0 = s3;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c163) {
          s1 = peg$c163;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e205); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsePromiseFalse();
            if (s3 !== peg$FAILED) {
              s0 = s3;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c163) {
            s1 = peg$c163;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e205); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseOPEN();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsePromiseFalse();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseCLOSE();
                if (s4 !== peg$FAILED) {
                  s0 = s3;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePromiseTrue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseMacroCallSpec();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f263(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePromiseFalse() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseMacroCallSpec();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f264(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseThenCatchClause() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseThenClause();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCatchClause();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f265(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseThenClause() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c4) {
        s2 = peg$c4;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseStatementOrBlock();
          if (s4 !== peg$FAILED) {
            s0 = s4;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCatchClause() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c164) {
        s2 = peg$c164;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e206); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseStatementOrBlock();
          if (s4 !== peg$FAILED) {
            s0 = s4;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePseudoCall() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c166) {
      s1 = peg$c166;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c108;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c120;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e150); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f266();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c165) {
        s1 = peg$c165;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e207); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c108;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e135); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c120;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e150); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f267();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c167) {
          s1 = peg$c167;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e209); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c108;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e135); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c120;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e150); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f268();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseFunctionCall() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseFunctionCallResloc();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f269(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCallFunctionTag() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parserestag();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOPEN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseCLOSE();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f270(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionCallResloc() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseRESERVED();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseresloc_or_tag();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseOPEN();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseCLOSE();
          if (s6 !== peg$FAILED) {
            s0 = s2;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralValue() {
    var s0;

    s0 = peg$parseValueConstant();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePseudoFunction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteralArray();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLiteralObject();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLiteralScalar();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLiteralScalar() {
    var s0;

    s0 = peg$parseLiteralBoolean();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLiteralString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteralFloat();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLiteralInt();
        }
      }
    }

    return s0;
  }

  function peg$parseLiteralBoolean() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c96) {
      s1 = peg$c96;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f271();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c97) {
        s1 = peg$c97;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f272();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseLiteralInt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseINT();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (peg$r27.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e223); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (peg$r28.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e224); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f273(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralFloat() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFLOAT();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (peg$r28.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e224); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (peg$r29.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e225); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f274(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralArray() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      s3 = peg$currPos;
      s4 = peg$parseArrayItem();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parseCOMMA();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseArrayItem();
          if (s8 !== peg$FAILED) {
            s6 = s8;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseArrayItem();
            if (s8 !== peg$FAILED) {
              s6 = s8;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parseCOMMA();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s3;
        s3 = peg$f165(s4, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse___();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f275(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArrayItem() {
    var s0;

    s0 = peg$parseSpreadArray();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLiteralValue();
    }

    return s0;
  }

  function peg$parseSpreadArray() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLiteralValue();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f276(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralObject() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      s3 = peg$currPos;
      s4 = peg$parseObjectProp();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parseCOMMA();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseObjectProp();
          if (s8 !== peg$FAILED) {
            s6 = s8;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseObjectProp();
            if (s8 !== peg$FAILED) {
              s6 = s8;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parseCOMMA();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s3;
        s3 = peg$f277(s4, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse___();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c98;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f278(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectProp() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parseSpreadObject();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLiteralScalar();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c93;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse___();
          s5 = peg$parseLiteralValue();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f279(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSpreadObject() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLiteralValue();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f280(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralString() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestring_lit();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f281(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLiteralIdent() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWORD();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f282(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePseudoFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c109) {
      s1 = peg$c109;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLiteralValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f283(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c110) {
        s1 = peg$c110;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLiteralValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f284(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBlockSpec() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseValueConstant();
    if (s1 === peg$FAILED) {
      s1 = peg$parseValueResLoc();
      if (s1 === peg$FAILED) {
        s1 = peg$parseValueResTag();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCONCAT();
      s4 = peg$parseBlockStates();
      if (s4 !== peg$FAILED) {
        s2 = s4;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parseCONCAT();
      s5 = peg$parseLiteralObject();
      if (s5 !== peg$FAILED) {
        s3 = s5;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f285(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlockStates() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse___();
      s3 = peg$currPos;
      s4 = peg$parseBlockState();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parseCOMMA();
        if (s7 !== peg$FAILED) {
          s8 = peg$parseBlockState();
          if (s8 !== peg$FAILED) {
            s6 = s8;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseBlockState();
            if (s8 !== peg$FAILED) {
              s6 = s8;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parseCOMMA();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s3;
        s3 = peg$f286(s4, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse___();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f278(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlockState() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parseSpreadObject();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLiteralScalar();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c31;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse___();
          s5 = peg$parseLiteralValue();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f279(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseTests() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseTest();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c155) {
          s5 = peg$c155;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e197); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseTest();
            if (s7 !== peg$FAILED) {
              s3 = s7;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c155) {
            s5 = peg$c155;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e197); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTest();
              if (s7 !== peg$FAILED) {
                s3 = s7;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f287(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTest() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c156) {
      s1 = peg$c156;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e198); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTestValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f288(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c160) {
        s1 = peg$c160;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e202); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTestValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f289(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLoopTests() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLoopTest();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c155) {
          s5 = peg$c155;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e197); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseLoopTest();
            if (s7 !== peg$FAILED) {
              s3 = s7;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c155) {
            s5 = peg$c155;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e197); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseLoopTest();
              if (s7 !== peg$FAILED) {
                s3 = s7;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f287(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLoopTest() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c161) {
      s1 = peg$c161;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseTestValue();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f288(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c159) {
        s1 = peg$c159;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e201); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTestValue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f289(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseTestValue() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTestValue();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCLOSE();
        if (s3 !== peg$FAILED) {
          s0 = s2;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseValuePredicate();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBlockSpec();
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueCompare();
        }
      }
    }

    return s0;
  }

  function peg$parseValuePredicate() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseValueResLoc();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f290(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }



    const FN = fn => {
      fn||=($,location,...args)=>{
        const ret = {$}
        for (const arg of args) Object.assign(ret,arg);
        return ret;
      }
      return ($,...args) => {
        const loc = location();
        const {file} = options;
        loc.file = file;
        const node = fn($,loc,...args)
        return node;  
      }
    }
    const N = FN(options.N);
    const V = FN(options.V);
    const I = FN(options.I);


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
